be configured with transformer specific parameters which are represented by the Transformer Description Stereotypes atpVariation Tags vhlatestBindingTimepostBuild transformer ClassTransformerClassEnum 1 attr Specifies to which transformer class this transformer belongs version String 1 attr Version of the implemented protocol Table A33 TransformationTechnology 102 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformerSpecification of SOMEIP Transformer AUTOSAR CP R2111 Class TriggerToSignalMapping Package M2AUTOSARTemplatesSystemTemplateDataMapping Note This metaclass represents the ability to map a trigger to a SystemSignal of size 0 The Trigger does not transport any other information than its existence therefore the limitation in terms of signal length Base ARObject DataMapping Attribute Type Mult Kind Note systemSignal SystemSignal 1 ref This is the SystemSignal taken to transport the Trigger over the network Tags xmlsequenceOffset20 trigger Trigger 1 iref This represents the Trigger that shall be used to trigger RunnableEntities deployed to a remote ECU Tags xmlsequenceOffset10 InstanceRef implemented by TriggerInSystemInstance Ref Table A34 TriggerToSignalMapping B Features of SOMEIP not supported by AUTOSAR SOMEIP transformer The following features of SOMEIP are currently not supported by the SOMEIP trans former Exceptions and exceptionspecific error data structures Tunneling of SOMEIP messages through CAN and Flexray leads to SOMEIP messages without parts of the header inserted by 4 SWS Socket Adaptor Queued FireForget methods without parameters are not supported by AUTOSAR at all Unqueued FireForget methods without parameters and queued FireForget methods with parameters are supported The SOMEIP transformer doesnt check whether variable size arrays contain a minimal number of elements reason this is supported by SOMEIP protocol but not by AUTOSAR Optional method arguments AUTOSAR Classic platform does not support the existence of optional method arguments C Examples This appendix contains examples which are suitable to help understanding details of the SOMEIP Transformer 103 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformerSpecification of SOMEIP Transformer AUTOSAR CP R2111 C1 Serialization of a ClientServer Operation As the serialization of interECU ClientServer communication is the most complex scenario this example will show the resulting APIs which exist in RTE and Transformer both on the Client and the Server as well an overview of the resulting serialized data on the network The example deals with two SWCs which are distributed to two ECUs which are con nected over some kind of network The SOMEIP Transformer shall be used to se rialize the interECU communication The client calls a ClientServerOperation which is provided by the server For the server there are two PortDefinedAr gumentValue s defined which are applied to the runnable which implements the ClientServerOperation These PortDefinedArgumentValue s are only visible within the InternalBehavior of the server They are not visible to the outside world ClientServerInterface neither to the client nor in the data on the network The following tables define the example ClientServerInterface used here Name SomeCSInterface Comment A ClientServerInterface which contains anything needed to show serialization of ClientServerOperations by SOMEIP Transformer IsService false Variation Possible Errors 0 EOK 1 EDATAINCONSISTENT 2 EUNKNOWNERROR Table C1 ClientServerInterface SomeCSInterface Operations Name SomeCSOperation Comments The ClientServerOperation which is used to demonstrate how the SOMEIP serialization for ClientSever communication works Variation Parameters inputParam1 Comment A parameter which is handed over from the Client to the Server Type uint8 Variation Direction IN inputParam2 Comment A parameter which is handed over from the Client to the Server Type uint16 Variation Direction IN biDirectionalParam 104 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformerSpecification of SOMEIP Transformer AUTOSAR CP R2111 Comment A parameter which is handed over from the Client to the Server modified by the Server and handed back to the Client Type someStruct Variation Direction INOUT outputParam1 Comment A parameter which is handed over from the Server to the Client Type uint16 Variation Direction OUT outputParam2 Comment A parameter which is handed over from the Server to the Client Type uint32 Variation Direction OUT Possible Errors EOK Operation successful EDATA INCONSISTENTData are inconsistent EUNKNOWNERROR An unknown error occured Table C2 Operation SomeCSOperation C11 Client On the client side the following RTEAPI is generated according to SWSRte01102 based on the ClientServerInterface which is specified above and the attribute errorHandling ofPortAPIOption StdReturnType RteCallClientPortSomeCSOperation uint8 inputParam1 uint16 inputParam2 someStruct biDirectionalParam uint16 outputParam1 uint32 outputParam2 RteTransformerError transformerError For this signature the attribute errorHandling ofPortAPIOption is set to trans formerErrorHandling If it would be set to noTransformerErrorHandling the parameter RteTransformerError transformerError would not be included in the signature above The signature above reflects an synchronous server call For an asynchronous server call all OUT parameters would be missing for RteCall but an RteResult would be necessary instead The examples for signatures and parameters shown here can be transferred analogously to RteResult This is the API used in the runnable of the client to call the remote server operation 105 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformerSpecification of SOMEIP Transformer AUTOSAR CP R2111 The RTE executes for the serialization of the request the SOMEIP Transformer with the following API which is specified in SWSSomeIpXf00141 uint8 SomeIpXfCSOpSerializer const RteCsTransactionHandleType TransactionHandle uint8 buffer uint16 bufferLength uint8 inputParam1 uint16 inputParam2 someStruct biDirectionalParam This function will serialize the TransactionHandle and all ININOUT parameters for the request into the following format SOMEIP Header input Param1 inputParam2 biDirectionalParam Figure C1 Example for serialized data of the ClientServer Request The SOMEIP Header contains the TransactionHandle see SWSSomeIpXf00025 and SWSSomeIpXf00026 To deserialize the response that is received by the client after execu tion of the ClientServerOperation on the server the API according to SWSSomeIpXf00145 is used uint8 SomeIpXfInvCSOpSerializer RteCsTransactionHandleType TransactionHandle const uint8 buffer uint16 bufferLength StdReturnType returnValue someStruct biDirectionalParam uint16 outputParam1 uint32 outputParam2 C12 Server On the server side the ClientServerOperation is implemented by a runnable with the following signature which now contains the PortDefinedArgumentValue s see SWSRte01166 StdReturnType SomeCSOperation uint8 portDefArg1 uint8 portDefArg2 uint8 inputParam1 uint16 inputParam2 someStruct biDirectionalParam uint16 outputParam1 uint32 outputParam2 106 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformerSpecification of SOMEIP Transformer AUTOSAR CP R2111 For the deserialization of the received request the SOMEIP Transformer on the server side provides according to SWSSomeIpXf00141 this CAPI uint8 SomeIpXfInvCSOpSerializer RteCsTransactionHandleType TransactionHandle const uint8 buffer uint16 bufferLength uint8 inputParam1 uint16 inputParam2 someStruct biDirectionalParam The function for serialization of the response is specified by SWSSomeIpXf00145 uint8 SomeIpXfCSOpSerializer const RteCsTransactionHandleType TransactionHandle uint8 buffer uint16 bufferLength StdReturnType returnValue someStruct biDirectionalParam uint16 outputParam1 uint32