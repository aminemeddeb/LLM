corresponds to a distinct occurrence of the latter iii Client authentication an attacker cannot impersonate the requester and obtain srvkey This query is modeled with an injective correspondence if the offerer received a valid runtime message ie event endreqauth is executed then a legitimate requester must have sent it ie event beginreqauth must have been previously triggered Otherwise an attacker would have obtained srvkey and he would be able to send messages without being detected iv Observational equivalence an attacker cannot distinguish between a legitimate message and a random message once encrypted In other words given two encrypted payloads the attacker cannot discern whether they refer to the same content This property is veried using the choice construct in Proverif Yet a positive outcome is achieved only in case symmetric cryptography is modeled explicitly adopting an initialization vector to introduce some randomness as in actual algorithms Conversely a simpler model neglecting it makes the verication fail demonstrating that an attacker would be able to recognize two identical payloads VII D ISCUSSION In this section we discuss the most relevant advantages of our solution with respect to the direct usage of SOMEIP encapsulated within a lower secure protocol eg IPSec or TLSDTLS Although most of the comparison refers strictly to the characteristics associated with the SOMEIP specications some arguments concern the compatibility with vsomeip Yet to the best of our knowledge the GENIVI stack is the only opensource SOMEIP implementation currently available thus being denitely worth of investigation The comparison focuses on the following aspects i Service awareness whether the security framework can discern between different services to guarantee the authentication of the parties involved in the communication ii Multicast support the ability of a solution to transparently secure onetomany com munication iii Apptoapp security whether real endtoend security is guaranteed given the routing manager abstraction adopted in vsomeip ie multihop communication iv L4 transparency whether security is transparently provided regard less of the L4 protocol eg TCP or UDP adopted for the actual message delivery In other words it indicates whether a single secure session can protect a service instance in the event that multiple transport protocols are leveraged simultaneously fordifferent purposes v IPC protection the possibility to directly protect interprocess communications ie Unix domain sockets adopted by vsomeip for efcient local message delivery without introducing the overhead of a full transport protocol A SOMEIP over IPSec Concerning SOMEIP protection IPSec could be leveraged to establish secure channels between different ECUs hosting distributed applications Nonetheless although the messages transmitted across the network would be secured the protection would be only at the network level being IPSec unaware of the actual trafc Hence it would not guarantee the authentication of the parties involved in the communication ie every application hosted on an ECU could send messages to another one hosted on a different ECU if a secure tunnel is established Similarly it would not secure the messages exchanged between applications executed on the same ECU Finally IPSec does not support multicast communication forcing the SOMEIP middleware to fallback to unicast and increasing the overall bandwidth usage Summarizing we deem IPSec not being suitable to guarantee the level of compatibility with the SOMEIP middleware at the basis of the design of our proposal B SOMEIP over TLSDTLS TLS is a wellestablished cryptographic protocol securing TCP connections while DTLS is an extension designed to protect UDP messages At rst sight they appear to be suitable to protect SOMEIP messages given the promised application awareness and endtoend security Indeed the feasibility of using TLS to protect invehicle communication has already been explored in literature 31 Yet in our opinion different factors still justify a custom solution First being general purpose TLS is characterized by a fairly complex session establishment process thus introducing a quite high overhead compared to a more targeted solution Second no standard version of DTLS does support multicast communication thus limiting the efciency in the delivery of notications Third both TLS and DTLS are not suitable to protect interprocess communication unless an additional overhead is introduced eg by using TCP Finally both security protocols cannot guarantee real endtoend security between the sending and the receiving applications when coupled with vsomeip Indeed they would secure only the messages owing from one central routing manager to another leaving the local communication ie between each routing manager and the actual applications executed on the same ECU unauthenticated thus increasing the criticality associated with the central routing managers themselves Similarly since different service instances may be attached to the same fipportgtuple both TLS and DTLS could not provide real service granularity On the other hand our solution aims to achieve 100 compatibility with both SOMEIP and vsomeip while featuring a more efcient session establishment procedure VIII E XPERIMENTAL EVALUATION To experimentally evaluate the performance of the solution proposed to secure SOMEIP communication we integrated12 the security framework within vsomeip Nonetheless we focused on the implementation of the security protocol leaving the usage of a secure storage as a future work Concerning cryptography we leveraged OpenSSL being it a wellknown efcient and commercial grade library available for a wide range of systems and architectures The complete source code of the proof of concept is publicly available on GitHub4Part of the results described in the remainder of this section stem from evaluation metrics originally presented in 17 The testbed adopted for the experimental evaluation was composed of two identical NXPs development boards based on the iMX 7Dual applications processor They encompass two Arm CortexA7 cores operating at up to 1 GHz and 1 GB of DDR3 RAM We directly interconnected the two ECUs through an Ethernet cable while limiting the speed to100 Mbps to match the current standard in automotive environments Concerning the operating system we adopted an embedded Posix Linux distribution according to the Adaptive Autosar guidelines Overall although not having used real production ECUs due to licensing issues we deem the whole setup matches the features of a real invehicle deployment Indeed both SOMEIP and the whole Adaptive Autosar standard have been developed with relatively highperformance microprocessorbased ECUs in mind focusing on use cases such as infotainment connected vehicle