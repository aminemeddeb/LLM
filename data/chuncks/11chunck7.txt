current approach where the size of length fields is statically configured This approach has the drawback that changing the size of the length field during evolution of interfaces is always incompatible Thus wire types 5 6 and 7 allow to encode the size of the used length field in the transferred byte stream SWSSomeIpXf00271 dIfSOMEIPTransformationISignalProps isDynami cLengthFieldSize is set to false or is not defined the transformer shall use wire type 4 for serializing complex types and shall use the fixed size length fields The size of the length fields is defined in SOMEIPTransformationISignalProps sizeOfAr rayLengthFields sizeOfStructLengthFields andsizeOfUnionLength Fields cSRSXfrm00106 SWSSomeIpXf00272 dSOMEIPTransformationISignalProps isDynami cLengthFieldSize is set to true the transformer shall use wire types 567 for serializing complex types and shall chose the size of the length field according to this wire typecSRSXfrm00106 SWSSomeIpXf00273 dA deserializer shall always be able to handle the wire types 4 5 6 and 7 independent of the setting of SOMEIPTransformationISignalProps isDynamicLengthFieldSize cSRSXfrm00106 SWSSomeIpXf00274 dIf a Data ID is defined for an ArgumentDataPrototype orImplementationDataTypeElement by means of SOMEIPTransformation ISignalProps tlvDataId id a tag shall be inserted in the serialized byte stream c SRSXfrm00106 Note regarding existence of Data IDs refer to 7 SWSSomeIpXf00275 dIf the datatype of the serialized member argument is a basic datatype wire types 03 and a Data ID is configured the tag shall be inserted directly in front of the memberargument No length field shall be inserted into the serialized stream cSRSXfrm00106 SWSSomeIpXf00276 dIf the datatype of the serialized memberargument is not a basic datatype wire type 47 and a Data ID is configured the tag shall be inserted in front of the length field cSRSXfrm00106 SWSSomeIpXf00277 dIf the datatype of the serialized memberargument is not a basic datatype and a Data ID is configured a length field shall always be inserted in front of the memberargument cSRSXfrm00106 Rationale The length field is required to skip unknown membersarguments during deserialization SWSSomeIpXf00278 dThe length field shall always contain the length up to the next tag of the struct but does not include the tag size and length field size itself c SRSXfrm00106 36 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformerSpecification of SOMEIP Transformer AUTOSAR CP R2111 SWSSomeIpXf00279 dIf the member itself is of type struct there shall be exactly one length fieldcSRSXfrm00106 SWSSomeIpXf00280 dIf the member itself is of type dynamic length string there shall be exactly one length field cSRSXfrm00106 SWSSomeIpXf00281 dIf the member itself is of type fixed length string there shall be exactly one length field corresponding to dynamic length strings cSRSXfrm 00106 Note When serialized without tag fixed length strings do not have a length field For the serialization with tag a length field is also required for fixed length strings in the same way as for dynamic length strings SWSSomeIpXf00282 fDRAFTgdIf the member itself is of type dynamic length ar ray there shall be exactly one length field cSRSXfrm00106 SWSSomeIpXf00283 dIf the member itself is of type fixed length array there shall be exactly one length field cSRSXfrm00106 SWSSomeIpXf00284 dIf the member itself is of type union there shall be exactly one length fieldcSRSXfrm00106 SWSSomeIpXf00285 dFor the serialization of extensible structs and methods the length field shall cover the size of the type field data and padding bytes if the member itself is of type union cSRSXfrm00106 Note For the serialization without tags the length field of unions does not cover the type field see SWSSomeIpXf00226 For the serialization with tags it is required that the complete content of the serialized union is covered by the length field SWSSomeIpXf00286 dA member of a nonextensible standard struct which is of type extensible struct shall be serialized according to the requirements for extensible structscSRSXfrm00106 SWSSomeIpXf00287 dA member of an extensible struct which is of type non extensible standard struct shall be serialized according to the requirements for stan dard structscSRSXfrm00106 SWSSomeIpXf00288 dFor the serialization of extensible structs and methods no alignment shall be applied cSRSXfrm00106 Rationale When alignment greater 8 bits is used the serializer may add padding bytes after variable length data The padding bytes are not covered by the length field If the receiver does not know the Data ID of the member it also does not know that it is variable length data and that there might be padding bytes SWSSomeIpXf00289 dIf the attribute isStructWithOptionalElement of the ImplementationDataType representing the extensible struct is set to true the 37 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformerSpecification of SOMEIP Transformer AUTOSAR CP R2111 transformer shall ignore the first ImplementationDataTypeElement and shall not se rialize or deserialize it cSRSXfrm00106 Rationale the first ImplementationDataTypeElement represents the availability bitfield which is not transferred on the wire SWSSomeIpXf00290 dThe transformer shall only serialize an optional member of a struct if the corresponding bit in the availability bitfield is set as follows availabilityBitfieldpos8 1pos mod 8 0 cSRSXfrm00106 SWSSomeIpXf00291 dIf an optional member is available in the serialized byte stream the transformer shall set the corresponding bit in the availability bitfield as follows availabilityBitfieldpos8 availabilityBitfieldpos8 1pos mod 8 cSRSXfrm00106 SWSSomeIpXf00292 dIf an optional member is not available in the serialized byte stream the transformer shall clear the corresponding bit in the availability bitfield as follows availabilityBitfieldpos8 availabilityBitfieldpos8 1pos mod 8 cSRSXfrm00106 In the requirements SWSSomeIpXf00288 SWSSomeIpXf00289 and SWS SomeIpXf00290 pos is the position of the optional ImplementationDataType Element among all optional ImplementationDataTypeElement s within the Im plementationDataType starting with pos 0 Note Nonoptional ImplementationDataTypeElement s do not count since they do not need a bit in the availabilityBitfield So the bit position within the availabilityBitfield is determined by the order of the optional ImplementationDataTypeElement s Examples 1st optional ImplementationDataTypeElement pos0 availabilityBitfield0 0x01 0 8th optional ImplementationDataTypeElement pos7 availabilityBitfield0 0x80 0 9th optional ImplementationDataTypeElement pos8 availabilityBitfield1 0x01 0 SWSSomeIpXf00295 dIf an optional member is not available in the received se rialized byte stream the transformer shall keep the memory section occupied by this optional element without modification cSRSXfrm00106 38 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformerSpecification of SOMEIP Transformer AUTOSAR CP R2111 SWSSomeIpXf00293 dIf the transformer reads an unknown Data ID ie not con tained in its data definition it shall skip the unknown memberargument by using the information of the