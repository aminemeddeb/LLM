Specification of SOMEIP Transformer
AUTOSAR CP R2111
Document TitleSpecification of SOMEIP
Transformer
Document Owner AUTOSAR
Document Responsibility AUTOSAR
Document Identification No 660
Document Status published
Part of AUTOSAR Standard Classic Platform
Part of Standard Release R2111
Document Change History
Date Release Changed by Description
20211125 R2111AUTOSAR
Release
ManagementClarification on network
representation
SOMEIP Header encoded in
network byte order
Clarification on
SOMEIPLegacyStringSerialization
Optional method arguments not
supported
Clarification on Interface Version
Clarification on processing order of
header fields in AUTOSAR CP
Removed
SOMEIPXFEUNKNOWNSERVICE
and
SOMEIPXFEUNKNOWNMETHOD
Introduction on External Trigger
Events
Clarification on ISignal length of
external trigger event
Editorial Changes
1 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
20201130 R2011AUTOSAR
Release
ManagementAdded callresponse context to Client
Server requirements
Constraint added for data type of
length field of variable Strings
Added EE2E Error to Table 711
Return Codes
Requirement added in case
unvailability of optional member in
the received serialized byte stream
Reworked E2E communication
protection for methods
sizeOfStringLengthField introduced
for the size of the length field for
dynamic length strings
sizeOfArrayLengthField introduced
for the size of the length field for
variable size arrays
Fixed design issues with E2E
communication protection for
methods
Editorial Changes
20191128 R1911AUTOSAR
Release
ManagementExtended Serialization for Data
Structures in SOMEIP with
taglengthvalue encoding set to valid
Removed ACK message types
replaced
implementsSOMEIPStringHandling
in class
SOMEIPTransformationSignalProps
with
implementsLegacyStringSerialization
Minor corrections  clarifications 
editorial changes For details please
refer to the ChangeDocumentation
Changed Document Status from
Final to published
2 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
20181031 440AUTOSAR
Release
ManagementChecking for length of received
dynamic length strings
Extended Serialization for Data
Structures in SOMEIP with
taglengthvalue encoding
Minor corrections  clarifications 
editorial changes For details please
refer to the ChangeDocumentation
20171208 431AUTOSAR
Release
ManagementBugfixes in serialization of strings
and data with variable size
Signatures improved
Minor corrections  clarifications 
editorial changes For details please
refer to the ChangeDocumentation
20161130 430AUTOSAR
Release
ManagementSizes of length fields can be
configured independently from each
other
Support of union data types
Minor corrections  clarifications 
editorial changes For details please
refer to the ChangeDocumentation
20150731 422AUTOSAR
Release
ManagementSize of length fields is configurable
External trigger events are
communciated as fireandforget
methods
Autonomous error reactions of
SOMEIP transformer
Minor corrections  clarifications 
editorial changes For details please
refer to the ChangeDocumentation
20141031 421AUTOSAR
Release
ManagementInitial Release
3 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Disclaimer
Disclaimer
This work specification andor software implementation and the material contained in
it as released by AUTOSAR is for the purpose of information only AUTOSAR and the
companies that have contributed to it shall not be liable for any use of the work
The material contained in this work is protected by copyright and other types of intel
lectual property rights The commercial exploitation of the material contained in this
work requires a license to such intellectual property rights
This work may be utilized or reproduced without any modification in any form or by
any means for informational purposes only For any other purpose no part of the work
may be utilized or reproduced in any form or by any means without permission in
writing from the publisher
The work has been developed for automotive applications only It has neither been
developed nor tested for nonautomotive applications
The word AUTOSAR and the AUTOSAR logo are registered trademarks
4 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Table of Contents
1 Introduction and functional overview 7
2 Acronyms and Abbreviations 8
3 Related documentation 9
31 Input documents                               9
32 Related standards and norms                        10
33 Related specification                             10
4 Constraints and assumptions 11
41 Limitations                                   11
42 Applicability to car domains                         11
5 Dependencies to other modules 12
51 File structure                                 12
511 Code file structure                         12
512 Header file structure                        12
6 Requirements Tracing 13
7 Functional specification 19
71 Definition of Identifiers                            22
72 Specification of the SOMEIP onwire format                23
721 Message Length Limitations                   23
722 Endianess                             24
723 Header                               24
7231 Message ID 32 bit                    25
7232 Length 32 bit                       26
7233 Request ID 32 bit                    26
7234 Protocol Version 8 bit                  27
7235 Interface Version 8 bit                  27
7236 Message Type 8 bit                   28
7237 Return Code 8 bit                    28
7238 Payload variable size                  29
724 Serialization of Parameters and Data Structures        29
7241 Basic Datatypes                     31
7242 Structured Datatypes structs              31
7243 Structured Datatypes and Arguments with Identifier
and optional Members                  34
7244 Strings                           39
7245 Arrays fixed length                   44
7246 Optional Parameters  Optional Elements       47
7247 Dynamic Length Arrays  Variable Size Arrays     47
7248 Bitfield                           50
7249 Union  Variant                      50
5 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
73 Protocol specification                             53
731 ClientServer Communication                   53
732 SenderReceiver Communication                 56
733 External Trigger Events                      57
734 Error Handling                           58
7341 Return Code                       58
7342 Communication Errors and Handling of Communica
tion Errors                         59
74 Reserved and special identifiers for SOMEIP and SOMEIPSD    61
75 Error Classification                              63
751 Development Errors                        63
752 Runtime Errors                           63
753 Transient Faults                          63
754 Production Errors                         63
755 Extended Production Errors                    64
8 API specification 65
81 Imported types                                65
82 Type definitions                                65
83 Function definitions                              65
831 SomeIpXfExtractProtocolHeaderFields             65
832 SomeIpXftransformerId                    67
833 SomeIpXfInvtransformerId                 72
834 SomeIpXfInit                           76
835 SomeIpXfDeInit                          77
836 SomeIpXfGetVersionInfo                    77
84 Callback notifications                             78
85 Scheduled functions                             78
86 Expected interfaces                              78
9 Sequence diagrams 79
10 Configuration specification 80
A Referenced Meta Classes 81
B Features of SOMEIP not supported by AUTOSAR SOMEIP transformer 103
C Examples 103
C1 Serialization of a ClientServer Operation                  104
C11 Client                                105
C12 Server                                106
6 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
1 Introduction and functional overview
This document specifies the Scalable serviceOriented MiddlewarE over IP
SOMEIP Transformer  This is a transformer which linearizes data with the SOMEIP
onthewire format and specifies an automotiveembedded mechanism for Clien
tServer communication
The only valid abbreviation is SOMEIP  Other abbreviations eg SomeIP are wrong
and shall not be used
The basic motivation to specify yet another ClientServer and SenderReceiver mech
anism instead of using an existing infrastructuretechnology is the goal to have a tech
nology that
Fulfills the hard requirements regarding resource consumption in an embedded
world
Is compatible through as many usecases and communication partners as possi
ble
Provides the features required by automotive usecases
Is scalable from tiny to large platforms
Can be implemented on different operating system ie AUTOSAR GENIVI and
OSEK and even embedded devices without operating system
7 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
2 Acronyms and Abbreviations
The glossary below includes acronyms and abbreviations relevant to the SOMEIP
Transformer that are not included in the 1 AUTOSAR glossary
Abbreviation  Acronym Description
ClientServiceInstanceEntryThe configuration and required data of a service instance another
ECU offers shall be called ClientServiceInstanceEntry at the
ECU using this service Client
Fielda field represents a status and thus has a valid value at all times
on which getter setter and notfier act upon
Finding a service instanceto send a SOMEIPSD message in order to find a needed ser
vice instance
Getter a RequestResponse call that allows read access to a field
Methoda method procedure function or subroutine that is calledin
voked
Notifiersends out event message with a new value on change of the
value of the field
Request a message of the client to the server invoking a method
Responsea message of the server to the client transporting results of a
method invocation
SD Service Discovery see2
Servicea logical combination of zero or more methods zero or more
events and zero or more fields empty service is allowed eg
for announcing nonSOMEIP services in SOMEIPSD
Service Instancesoftware implementation of the service interface which can exist
more than once in the vehicle and more than once on an ECU
Service Interfacethe formal specification of the service including its methods
events and fields
Setter a RequestResponse call that allows write access to a field
SOMEIPScalable serviceOriented MiddlewarE over IP
8 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
3 Related documentation
31 Input documents
References
1 Glossary
AUTOSARTRGlossary
2 Specification of Service Discovery
AUTOSARSWSServiceDiscovery
3 General Specification of Transformers
AUTOSARASWSTransformerGeneral
4 Specification of Socket Adaptor
AUTOSARSWSSocketAdaptor
5 Specification of RTE Software
AUTOSARSWSRTE
6 Requirements on AUTOSAR Features
AUTOSARRSFeatures
7 System Template
AUTOSARTPSSystemTemplate
8 Specification of Platform Types
AUTOSARSWSPlatformTypes
9 Software Component Template
AUTOSARTPSSoftwareComponentTemplate
10 Requirements on Transformer
AUTOSARSRSTransformer
11 UTF8 a transformation format of ISO 10646
httpwwwietforgrfcrfc3629txt
12 UTF16 an encoding of ISO 10646
httpwwwietforgrfcrfc2781txt
13 SOMEIP Protocol Specification
AUTOSARPRSSOMEIPProtocol
14 General Specification of Basic Software Modules
AUTOSARSWSBSWGeneral
15 General Requirements on Basic Software Modules
AUTOSARSRSBSWGeneral
9 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
32 Related standards and norms
Not applicable
33 Related specification
AUTOSAR provides a General Specification on Transformers 3 ASWS Transformer
General which is also valid for SOMEIP Transformer
Thus the specification SWS Transformer General shall be considered as additional
and required specification for SOMEIP Transformer
10 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4 Constraints and assumptions
41 Limitations
For the SOMEIP Transformer all general transformer limitations see 3 ASWS Trans
former General apply
The SOMEIP transformer doesnt implement the whole SOMEIP protocol
a part is implemented by 2 SWS Service Discovery
a part is implemented by 4 SWS Socket Adaptor
a part is currently not implemented in AUTOSAR This is documented in Ap
pendix B
The processing order of header fields in AUTOSAR CP deviates from the pro
cessing order defined in PRSSOMEIP00195 also Figure 421 Message Val
idation and Error Handling in SOMEIP This deviation is caused by the layered
architecture of AUTOSAR CP 
SWSSomeIpXfCONSTR0001 dIn accordance with SWSSomeIpXf00245
28sizeofdata type of length field shall be larger than the number of elements given
by the size indicator multiplied by the size in bytes of each element ie 1 for UTF8
and 2 for UTF16 and increased by the size in bytes required by the BOM cSRS
Xfrm00101
SWSSomeIpXfCONSTR0002 dSerialization based on the network representa
tion according to TPSSYST02136 is currently not supported in combination with
structured datatypes and arguments with identifier and optional members strings dy
namic length arrays  variable size arrays and unions  variants and shall therefore not
be used in those combinations cSRSXfrm00101
Note
Optional members according to section 7243 Strings according to section 72441
and 72442 Dynamic Length Arrays  Variable Size Arrays according to section
7247 and Unions  Variants according to section 7249
42 Applicability to car domains
The SOMEIP Transformer can be used for all domain applications when SOMEIP
SenderReceiver or ClientServer communication is used
11 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
5 Dependencies to other modules
The AUTOSAR RTE 5 SWS RTE has to exist to execute the transformer
51 File structure
511 Code file structure
The source code file structure is defined in the 3 ASWS Transformer General
512 Header file structure
SWSSomeIpXf00136 dThe header file SomeIpXfIeh shall be the main
include file for the SOMEIP transformer and include TransformerTypesh and its
Module Interlink Header file SchMbsnpviaih 
where
Ie is the optional implementation specific file name extension according SWS
BSW00103
bsnp is the BSW Scheduler Name Prefix according SWSRte07593 and SWS
Rte07594
vi is the vendorId of the BSW module and
ai is the vendorApiInfix of the BSW module cSRSBSW00346
The file TransformerTypesh contains the general transformer data types
12 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
6 Requirements Tracing
The following table references the features specified in 6 and links to the fulfillments
of these
Feature Description Satisfied by
SRSBSW00159 All modules of the
AUTOSAR Basic
Software shall
support a tool based
configurationSWSSomeIpXf00185
SRSBSW00337 Classification of
development errorsSWSSomeIPxf00184
SRSBSW00346 All AUTOSAR Basic
Software Modules
shall provide at least
a basic set of
module filesSWSSomeIpXf00136
SRSBSW00404 BSW Modules shall
support postbuild
configurationSWSSomeIpXf00183
SRSBSW00407 Each BSW module
shall provide a
function to read out
the version
information of a
dedicated module
implementationSWSSomeIpXf00180
SWSSomeIpXf00181
SWSSomeIpXf00182
SRSBSW00411 All AUTOSAR Basic
Software Modules
shall apply a naming
rule for enabling
disabling the
existence of the APISWSSomeIpXf00180
SWSSomeIpXf00181
SWSSomeIpXf00182
SRSBSW00441 Naming convention
for type macro and
functionSWSSomeIpXf00183
SRSXfrm00001 A transformer shall
work on data given
by the RteSWSSomeIpXf00264
SWSSomeIpXf00265
SWSSomeIpXf00266
13 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SRSXfrm00002 A transformer shall
provide fixed
interfacesSWSSomeIpXf00206
SWSSomeIpXf00207
SWSSomeIpXf00208
SWSSomeIpXf00209
SWSSomeIpXf00210
SWSSomeIpXf00211
SWSSomeIpXf00296
SWSSomeIpXf00297
SWSSomeIpXf00298
SWSSomeIpXf00299
SWSSomeIpXf00301
SWSSomeIpXf00302
SWSSomeIpXf00303
SWSSomeIpXf00304
SWSSomeIpXf00305
SWSSomeIpXf91001
SRSXfrm00004 A transformer shall
support error
handlingSWSSomeIpXf00264
SWSSomeIpXf00265
SWSSomeIpXf00266
SRSXfrm00008 A transformer shall
specify its output
formatSWSSomeIpXf00001
SWSSomeIpXf00002
SWSSomeIpXf00005
SWSSomeIpXf00006
SWSSomeIpXf00007
SWSSomeIpXf00009
SWSSomeIpXf00010
SWSSomeIpXf00011
SWSSomeIpXf00013
SWSSomeIpXf00015
SWSSomeIpXf00024
SWSSomeIpXf00025
SWSSomeIpXf00026
SWSSomeIpXf00029
SWSSomeIpXf00030
SWSSomeIpXf00031
SWSSomeIpXf00033
SWSSomeIpXf00130
SWSSomeIpXf00131
SWSSomeIpXf00132
SWSSomeIpXf00133
SWSSomeIpXf00134
SWSSomeIpXf00152
SWSSomeIpXf00154
14 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00155
SWSSomeIpXf00156
SWSSomeIpXf00160
SWSSomeIpXf00161
SWSSomeIpXf00163
SWSSomeIpXf00164
SWSSomeIpXf00165
SWSSomeIpXf00166
SWSSomeIpXf00168
SWSSomeIpXf00172
SWSSomeIpXf00212
SWSSomeIpXf00213
SWSSomeIpXf00234
SWSSomeIpXf00235
SWSSomeIpXf00236
SWSSomeIpXf00237
SWSSomeIpXf00238
SRSXfrm00101 The SOMEIP
Transformer shall
define the
serialization of
atomic and
structured data
elements into linear
arraysSWSSomeIpXf00016
SWSSomeIpXf00017
SWSSomeIpXf00034
SWSSomeIpXf00036
SWSSomeIpXf00037
SWSSomeIpXf00042
SWSSomeIpXf00053
SWSSomeIpXf00054
SWSSomeIpXf00055
SWSSomeIpXf00056
SWSSomeIpXf00057
SWSSomeIpXf00058
SWSSomeIpXf00059
SWSSomeIpXf00060
SWSSomeIpXf00069
SWSSomeIpXf00070
SWSSomeIpXf00072
SWSSomeIpXf00076
SWSSomeIpXf00088
SWSSomeIpXf00098
SWSSomeIpXf00099
SWSSomeIpXf00151
SWSSomeIpXf00169
SWSSomeIpXf00216
15 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00217
SWSSomeIpXf00218
SWSSomeIpXf00219
SWSSomeIpXf00220
SWSSomeIpXf00221
SWSSomeIpXf00222
SWSSomeIpXf00223
SWSSomeIpXf00224
SWSSomeIpXf00225
SWSSomeIpXf00226
SWSSomeIpXf00227
SWSSomeIpXf00234
SWSSomeIpXf00235
SWSSomeIpXf00236
SWSSomeIpXf00237
SWSSomeIpXf00238
SWSSomeIpXf00239
SWSSomeIpXf00240
SWSSomeIpXf00241
SWSSomeIpXf00242
SWSSomeIpXf00243
SWSSomeIpXf00244
SWSSomeIpXf00245
SWSSomeIpXf00246
SWSSomeIpXf00247
SWSSomeIpXf00248
SWSSomeIpXf00249
SWSSomeIpXf00250
SWSSomeIpXf00251
SWSSomeIpXf00252
SWSSomeIpXf00253
SWSSomeIpXf00254
SWSSomeIpXf00256
SWSSomeIpXf00257
SWSSomeIpXf00258
SWSSomeIpXf00259
SWSSomeIpXf00260
SWSSomeIpXf00262
SWSSomeIpXf00263
SWSSomeIpXf00306
SWSSomeIpXf00307
SWSSomeIpXfCONSTR0001
SWSSomeIpXfCONSTR0002
16 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SRSXfrm00102 The SOMEIP
Transformer shall
define a protocol for
interECU Client
Server
communicationSWSSomeIpXf00106
SWSSomeIpXf00107
SWSSomeIpXf00108
SWSSomeIpXf00111
SWSSomeIpXf00112
SWSSomeIpXf00113
SWSSomeIpXf00115
SWSSomeIpXf00120
SWSSomeIpXf00121
SWSSomeIpXf00170
SWSSomeIpXf00176
SWSSomeIpXf00200
SWSSomeIpXf00201
SWSSomeIpXf00202
SWSSomeIpXf00204
SWSSomeIpXf00205
SRSXfrm00103 The SOMEIP
Transformer shall
support exception
notification of
applicationsSWSSomeIpXf00111
SRSXfrm00105 The SOMEIP
Transformer shall
support autonomous
error reactions on
the server side for
clientserver
communicationSWSSomeIpXf00203
SRSXfrm00106 The SOMEIP
Transformer shall
support serialization
of extensible data
structs and methodsSWSSomeIpXf00267
SWSSomeIpXf00268
SWSSomeIpXf00269
SWSSomeIpXf00270
SWSSomeIpXf00271
SWSSomeIpXf00272
SWSSomeIpXf00273
SWSSomeIpXf00274
SWSSomeIpXf00275
SWSSomeIpXf00276
SWSSomeIpXf00277
SWSSomeIpXf00278
SWSSomeIpXf00279
SWSSomeIpXf00280
SWSSomeIpXf00281
SWSSomeIpXf00282
SWSSomeIpXf00283
SWSSomeIpXf00284
SWSSomeIpXf00285
SWSSomeIpXf00286
SWSSomeIpXf00287
SWSSomeIpXf00288
SWSSomeIpXf00289
SWSSomeIpXf00290
17 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00291
SWSSomeIpXf00292
SWSSomeIpXf00293
SWSSomeIpXf00294
SWSSomeIpXf00295
18 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
7 Functional specification
ECU 2  ECU 1  Sending Application  
SWC  
RTE 
 
Com  SOMEIP  
Serializer  Receiving Application  
SWC  
RTE 
Com  SOMEIP  
Deserializer  
Figure 71 Overview of SOMEIP Transformer
When a SWC initiates an interECU communication which is configured to be trans
formed the SWC hands the data over to the RTE The RTE executes the configured
transformer chain which contains the SOMEIP Transformer A transformer chain may
contain also other transformers but this is omitted in this overview for simplicity
The SOMEIP Transformer on the sender side serializes the data of the SWC and
brings them into an linear form The serialized data are sent via the communication
stack over the bus to the receivers The RTE of the receiver executes the transformer
chain in the reverse order The SOMEIP transformer of the receiver deserializes the
linear data back into the original data structure These are handed over to the receiving
SWC
From the SWCs point of view it is totally transparent whether data are transformed or
not
The SOMEIP transformer is a transformer of the class Serializer  It serializes struc
tured data into a linear form Therefore it can only be used as the first transformer on
the sending side and the last transformer on the receiving side in execution order
Furthermore it provides the transformer errors specified for this transformer class and
supports only outofplace buffer handling
19 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
The SOMEIP Transformer has no module specific EcuC because its whole configu
ration is based on the SOMEIPTransformationDescription andSOMEIPTrans
formationISignalProps 
Describable
TransformationDescription
enumeration
ByteOrderEnum
Attributes
 mostSignificantByteFirst
 mostSignificantByteLast
 opaqueSOMEIPTransformationDescription
 alignment PositiveInteger
 byteOrder ByteOrderEnum
 interfaceVersion PositiveIntegerDescribable
atpVariation
TransformationISignalProps
 csErrorReaction CSTransformerErrorReactionEnum  01
SOMEIPTransformationISignalProps
 implementsLegacyStringSerialization Boolean 0 1
 interfaceVersion PositiveInteger 01
 isDynamicLengthFieldSize Boolean 01
 messageType SOMEIPMessageTypeEnum 01
 sessionHandlingSR SOMEIPTransformerSessionHandli ngEnum 01
 sizeOfArrayLengthFields PositiveInteger 01
 sizeOfStringLengthFields PositiveInteger 01
 sizeOfStructLengthFields PositiveInteger 01
 sizeOfUnionLengthFields PositiveInteger 01
enumeration
SOMEIPTransformerSessionHandlingEnum
 sessionHandlingActive
 sessionHandlingInactiveFibexElement
ISignal
 dataTypePolicy DataTypePolicyEnum
 iSignalType ISignalTypeEnum 01
 length UnlimitedInteger
enumeration
CSTransformerErrorReactionEnum
 autonomous
 applicationOnlyIdentifiable
TransformationTechnology
 hasInternalState Boolean 01
 needsOriginalData Boolean 01
 protocol String
 transformerClass TransformerClassEnum
 version String
enumeration
SOMEIPMessageTypeEnum
Attributes
 request
 requestNoReturn
 notification
 responsetransformationISignalProps 0transformationDescription 01atpVariationtransformer 1
Figure 72 SOMEIP specific configuration
Class SOMEIPTransformationDescription
Package M2AUTOSARTemplatesSystemTemplateTransformer
Note The SOMEIPTransformationDescription is used to specify SOMEIP transformer specific attributes
Base ARObject Describable TransformationDescription
Attribute Type Mult Kind Note
alignment PositiveInteger 1 attr Defines the padding for alignment purposes that will be
added by the SOMEIP transformer after the serialized
data of the variable data length data element The
alignment shall be specified in Bits
byteOrder ByteOrderEnum 1 attr Defines which byte order shall be serialized by the
SOMEIP transformer
interfaceVersion PositiveInteger 1 attr The interface version the SOMEIP transformer shall use
Table 71 SOMEIPTransformationDescription
20 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Class atpVariation SOMEIPTransformationISignalProps
Package M2AUTOSARTemplatesSystemTemplateTransformer
Note The class SOMEIPTransformationISignalProps specifies ISignal specific configuration properties for
SOMEIP transformer attributes
Base ARObject Describable TransformationISignalProps
Attribute Type Mult Kind Note
implements
LegacyString
SerializationBoolean 01 attr This attribute indicates that Strings in the SOMEIP
message shall NOT be serialized according to the SOME
IP specification for Strings
If this attribute is set to true BOM and nulltermination
shall NOT be added in the serialization for Strings in the
payload If this attribute is set to false or not set BOM
and nulltermination shall be added in the serialization for
Strings in the payload according to the SOMEIP
specification for Strings
NOTE This attribute is not future safe and will be
removed in an upcoming AUTOSAR release
interfaceVersion PositiveInteger 01 attr The interface version the SOMEIP transformer shall use
isDynamic
LengthFieldSizeBoolean 01 attr This attribute shall be used to determine the wire type in
the context of using the TLV encoding
messageType SOMEIPMessageType
Enum01 attr The Message Type which shall be placed into the SOME
IP header
session
HandlingSRSOMEIPTransformer
SessionHandlingEnum01 attr Defines whether the SOMEIP transformer shall use
session handling for SenderReceiver communication
sizeOfArray
LengthFieldsPositiveInteger 01 attr The size of all length fields in Bytes of fixedsize arrays
or dynamic size arrays in the SOMEIP message This
attribute is valid for all available occurrences of fixedsize
arrays or dynamic size arrays in the SOMEIP message
sizeOfString
LengthFieldsPositiveInteger 01 attr The size of all length fields in Bytes of dynamic length
strings in the SOMEIP message This attribute is valid for
all available occurrences of strings in the SOMEIP
message
sizeOfStruct
LengthFieldsPositiveInteger 01 attr The size of all length fields in Bytes of structs in the
SOMEIP message This attribute is valid for all available
occurrences of structures in the SOMEIP message For
a more fine granular modeling on the level of Data
Prototypes the DataPrototypeTransformationProps shall
be used
sizeOfUnion
LengthFieldsPositiveInteger 01 attr The size of all length fields in Bytes of unions in the
SOMEIP message This attribute is valid for all available
occurrences of Unions in the SOMEIP message For a
more fine granular modeling on the level of Data
Prototypes the DataPrototypeTransformationProps shall
be used
tlvDataId
DefinitionTlvDataIdDefinitionSet  ref This reference identifies the TlvDataIdDefinitions relevant
for the enclosing SOMEIPTransformationISignalProps
Table 72 SOMEIPTransformationISignalProps
Enumeration ByteOrderEnum
Package M2AUTOSARTemplatesGenericStructureGeneralTemplateClassesPrimitiveTypes
Note When more than one byte is stored in the memory the order of those bytes may differ depending on
the architecture of the processing unit If the least significant byte is stored at the lowest address this
architecture is called little endian and otherwise it is called big endian
ByteOrder is very important in case of communication between different PUs or ECUs
5
21 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Enumeration ByteOrderEnum
Literal Description
mostSignificantByte
FirstMost significant byte shall come at the lowest address also known as BigEndian or as
MotorolaFormat
Tags atpEnumerationLiteralIndex0
mostSignificantByte
LastMost significant byte shall come highest address also known as LittleEndian or as IntelFormat
Tags atpEnumerationLiteralIndex1
opaque For opaque data endianness conversion has to be configured to Opaque See AUTOSAR COM
Specification for more details
Tags atpEnumerationLiteralIndex2
Table 73 ByteOrderEnum
Enumeration SOMEIPMessageTypeEnum
Package M2AUTOSARTemplatesSystemTemplateTransformer
Note Depending on the style of the communication different message types shall be set in the header of a
SOMEIP message
Literal Description
notification A request of a notification expecting no response
Tags atpEnumerationLiteralIndex1
request A request expecting a response
Tags atpEnumerationLiteralIndex2
requestNoReturn A fireforget request
Tags atpEnumerationLiteralIndex3
response The response message
Tags atpEnumerationLiteralIndex4
Table 74 SOMEIPMessageTypeEnum
SWSSomeIpXf00151 dThe SOMEIP transformer defined in this document shall
be used as a transformer if
the attribute protocol of the TransformationTechnology is set to SOMEIP
and the attribute version of the TransformationTechnology is set to 1
and the attribute transformerClass of the TransformationTechnology is
set to serializer
cSRSXfrm00101
71 Definition of Identifiers
SWSSomeIpXf00001 dA service shall be identified using the ServiceID cSRS
Xfrm00008
SWSSomeIpXf00002 dServiceIDs shall be of type 16 bit length unsigned integer
uint16cSRSXfrm00008
22 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
The ServiceID of 0xFFFE shall be used to encode nonSOMEIP services See
SWSSomeIpXf00130
SWSSomeIpXf00005 dDifferent services within the same vehicle shall have differ
ent ServiceIDscSRSXfrm00008
SWSSomeIpXf00006 dA service instance shall be identified using the Service
InstanceIDcSRSXfrm00008
SWSSomeIpXf00007 dServiceInstanceIDs shall be of type 16 bit length un
signed integer uint16 cSRSXfrm00008
The ServiceInstanceIDs of 0x0000 and0xFFFF shall not be used for a service
since 0x0000 is reserved and 0xFFFF is used to describe all service instances See
SWSSomeIpXf00130
SWSSomeIpXf00009 dDifferent service instances within the same vehicle shall
have different ServiceInstanceIDs cSRSXfrm00008
Note
This means that two different camera services shall have two different ServiceInstance
IDs SIID1 and SIID2 For one AUTOSAR system that designs a vehicle product
line SIID1 shall be the same for all vehicles The same is true for SIID2 If consid
ering another AUTOSAR system that designs another vehicle product line different
IDs may be used but it makes sense to use the same IDs among different AUTOSAR
systems for ease in testing and integration
SWSSomeIpXf00010 dMethods and events shall be identified inside a service us
ing a 16bit MethodID which is called EventID for events and notifications cSRS
Xfrm00008
SWSSomeIpXf00011 dMethods shall use MethodIDs with the highest bit set to 0
while the MethodIDs highest bit shall be set to 1 for events and notifications of fields c
SRSXfrm00008
72 Specification of the SOMEIP onwire format
Serialization describes the way data is represented in protocol data units PDUs trans
ported over an automotive invehicle network
721 Message Length Limitations
The usage of TCP allows for larger streams of data to transport SOMEIP header and
payload However current transport protocols for CAN and FlexRay limit messages
to 4095 Bytes When compatibility to those has to be achieved SOMEIP messages
including the SOMEIP header shall not exceed 4095 Bytes
23 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
722 Endianess
SWSSomeIpXf00013 dAll headers shall be encoded in network byte order Big
Endian MostSignificantByteFirst RFC 791 cSRSXfrm00008
SWSSomeIpXf00172 dThe byte order of the parameters inside the payload
shall be defined by byteOrder ofSOMEIPTransformationDescription cSRS
Xfrm00008
723 Header
SWSSomeIpXf00152 dFor interoperability reasons the header layout shall be iden
tical for all implementations of SOMEIP and is described as follows
1 Message ID Service ID  Method ID 32 bit
2 Length 32 bit
3 Additional information
a Protocol Version 8 bit
b Interface Version 8 bit
c Message Type 8 bit
d Return Code 8 bit
4 Payload variable size
The fields are presented in transmission order ie the fields on the top are transmit
ted first In the following sections the different header fields and their usage is being
describedcSRSXfrm00008
Note
Layout is also shown in Figure 73
24 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Protocol Version 8 bitInterface Version 8 bitMessage Type 8 bit Return Code 8 bitRequest ID Client ID  Session ID 32 bitLength 32 bitMessage ID Service ID  Method ID 32 bit
Payload variable size012345678910111213141516171819202122232425262728293031bit offsetCovered by Length
Figure 73 SOMEIP Header Format
Figure 73 shows the complete SOMEIP header The SOMEIP transformer only
implements the lower part all except Message ID and Length
SWSSomeIpXf00015 dThe SOMEIP transformer shall implement all fields of the
header except Message ID and Length cSRSXfrm00008
Rationale
MessageID and Length are not covered since this allows the AUTOSAR Socket Adap
tor header mode to work
These are added by other modules in the AUTOSAR BSW Nonetheless they are con
tained in Figure 73 to show the whole onwireformat
7231 Message ID 32 bit
The Message ID is a 32 bit identifier that is used to identify the message The Message
ID has to uniquely identify a method or event of a service
The assignment of the Message ID is up to the user however the Message ID has
to be unique for the whole system ie the vehicle The Message ID can be best
compared to a CAN ID and should be handled with a comparable process The next
section 72311 describes how to structure the Message IDs in order to ease the
organization of Message IDs
72311 Structure of the Message ID
In order to structure the different methods events and fields they are clustered into
services Services have a set of methods events and fields as well as a Service ID
which is only used for this service
25 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
An event shall be part of zero to many eventgroups and an eventgroup shall contain
zero to many events A field shall be part of zero to many eventgroups and an event
group can contain zero to many fields
For interECU ClientServer communication calls we structure the ID in 216services
with 215methods
Service ID 16 bit 0 1 bit Method ID last 15 bits
where the 0Bit is the first bit of the 16 bit Method ID
With 16 bit ServiceID and a 16 bit MethodID starting with a 0Bit 15 bit are still left
in the MethodID for real values this allows for up to 65536 services with up to 32768
methods each
Since events and notifications are transported using ClientServer communication the
ID space for the events is further structured
Service ID 16 bit 1 1 bit Event ID last 15 bits
where the 1Bit is the first bit of the 16 bit Method ID
This means that up to 32768 events or notifications per service are possible
7232 Length 32 bit
The Length field is 32 bit long and contains the length in Byte of the payload beginning
with the Request IDClient ID until the end of the SOMEIPmessage
7233 Request ID 32 bit
SWSSomeIpXf00154 dThe Request ID field shall be 32 bit long cSRSXfrm
00008
The Request ID shall be the unique identifier for the calling client inside the ECU Its
values are chosen by the RTE and handed over to the SOMEIP transformer
SWSSomeIpXf00024 dThe Request ID shall be constructed of the Client ID and
Session ID as shown in Table 75 cSRSXfrm00008
Client ID 16 bits Session ID 16 bits
Table 75 Construction of Request ID
Both are chosen by RTE and handed over to the transformer as
RteCsTransactionHandleType 
26 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00025 dThe clientId inside the
RteCsTransactionHandleType handed over from RTE shall be used for
the value of the Client ID cSRSXfrm00008
SWSSomeIpXf00026 dThe sequenceCounter inside the
RteCsTransactionHandleType handed over from RTE shall be used for
the value of the Session ID cSRSXfrm00008
For details of RteCsTransactionHandleType see SWSRte08732
The Request ID allows a client to differentiate multiple calls to the same method There
fore the Request ID has to be unique for a single client and server combination only
When generating a response message the server has to copy the Request ID from
the request to the response message This allows the client to map a response to the
issued request even with more than one request outstanding
Request IDs may be reused as soon as the response arrived or is not expected to
arrive anymore timeout
7234 Protocol Version 8 bit
SWSSomeIpXf00155 dThe Protocol Version field shall be 8 bit long cSRSXfrm
00008
SWSSomeIpXf00156 dThe Protocol Version field shall contain the SOMEIP pro
tocol versioncSRSXfrm00008
SWSSomeIpXf00029 dThe Protocol Version shall be set to 0x01 cSRSXfrm
00008
7235 Interface Version 8 bit
SWSSomeIpXf00030 dThe Interface Version field shall be 8 bit long cSRSXfrm
00008
SWSSomeIpXf00160 dThe Interface Version field shall contain the Version of the
Service Interface cSRSXfrm00008
Rationale This is required to catch mismatches in Service definitions and allows de
bugging tools to identify the Service Interface used if version is used
Note
The Version of the corresponding Service Discovery service has to match the
version of the Service Interface ie SdServerServiceMajorVersion andor
SdClientServiceMajorVersion has to match the used SOMEIPTransforma
tionDescription interfaceVersion andor SOMEIPTransformationISig
nalProps interfaceVersion see TPSSYST02377
27 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
7236 Message Type 8 bit
SWSSomeIpXf00161 dThe Message Type field shall be 8 bit long cSRSXfrm
00008
The Message Type field is used to differentiate different types of messages
SWSSomeIpXf00031 dThe Message Type field shall be filled with one of the values
of Table 76cSRSXfrm00008
Number Value Description
0x00 REQUEST A request expecting a response even
void
0x01 REQUESTNORETURN A fireforget request
0x02 NOTIFICATION A request of a notification expecting no
response
0x80 RESPONSE The response message
0x81 ERROR The response containing an error
Table 76 Message Types
A regular client request message type 0x00  is answered by a server response mes
sage type 0x80  when no error occurred If errors occur an error message message
type0x81  will be sent
For updating values through notification a callback interface exists message type
0x02 
It is possible to send a request that does not have a response message message type
0x01  to use SOMEIP for AUTOSAR SenderReceiver communication
7237 Return Code 8 bit
SWSSomeIpXf00163 dThe Return Code field shall be 8 bit long cSRSXfrm
00008
SWSSomeIpXf00164 dThe Return Code field shall be used to signal whether a
request has been successfully processed cSRSXfrm00008
For simplification of the header layout every message transports the field Return Code
The Return Codes are specified in detail in SWSSomeIpXf00115
SWSSomeIpXf00033 dMessages of Type REQUEST REQUESTNORETURN
and Notification have to set the Return Code to 0x00 EOK cSRSXfrm00008
SWSSomeIpXf00168 dThe allowed Return Codes for specific message types are
specified in Table 77 cSRSXfrm00008
Message Type Allowed Return Codes
REQUEST NA set to 0x00 EOK
28 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
REQUESTNORETURN NA set to 0x00 EOK
NOTIFICATION NA set to 0x00 EOK
RESPONSE See Return Codes in SWSSomeIpXf00115
Table 77 Return Codes
7238 Payload variable size
SWSSomeIpXf00165 dThe Payload field shall have variable size cSRSXfrm
00008
SWSSomeIpXf00166 dThe Payload field shall contain the transported data c
SRSXfrm00008
The serialization of the data will be specified in the following section
724 Serialization of Parameters and Data Structures
SWSSomeIpXf00034 dThe serialization shall be based on the Sender
ReceiverInterface orClientServerInterface of the datacSRSXfrm
00101
SWSSomeIpXf00169 dTo allow migration the deserialization shall ignore parame
ters attached to the end of previously known parameter list cSRSXfrm00101
This means Parameters that were not defined in the ClientServerInterface or
SenderReceiverInterface used to generate or parameterize the deserialization
code at the end of the serialized data will be ignored by the deserialization
SWSSomeIpXf00259 dAfter the serialized data of a variable data length Dat
aPrototype a padding for alignment purposes shall be added for the configured
alignment see SWSSomeIpXf00260 and SWSSomeIpXf00262 if the variable
data length DataPrototype is not the last element in the serialized data stream This
requirement does not apply for the serialization of extensible structs and methods c
SRSXfrm00101
Note
See also chapter 7243
SWSSomeIpXf00260 dIfSOMEIPTransformationProps alignment is set for
a variable data length data element the value of SOMEIPTransformationProps 
alignment defines the alignment This requirement does not apply for the serializa
tion of extensible structs and methods  cSRSXfrm00101
Note
See also chapter 7243
29 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00262 dIfSOMEIPTransformationProps alignment is not set
for a variable data length data element the value of SOMEIPTransformationDe
scription alignment defines the alignment This requirement does not apply for
the serialization of extensible structs and methods cSRSXfrm00101
Note
See also chapter 7243
SWSSomeIpXf00263 dAfter serialized fixed data length data elements the
SOMEIP transformer shall never add automatically a padding for alignment cSRS
Xfrm00101
Note
If the following data element shall be aligned a padding element of accord
ing size needs to be explicitly inserted into the ImplementationDataType
in case of serialization based on ImplementationDataType s according to
SWSSomeIpXf00307 or into the AutosarDataType in case of serialization
based on NetworkRepresentation according to SWSSomeIpXf00306
SWSSomeIpXf00037 dAlignment shall always be calculated from start of SOMEIP
messagecSRSXfrm00101
This attribute defines the memory alignment The SOMEIP Transformer does not try
to automatically align parameters but aligns as specified The alignment is currently
constraint to multiple of 1 Byte to simplify code generators
SOMEIP payload should be placed in memory so that the SOMEIP payload is suit
able aligned For infotainment ECUs an alignment of 8 Bytes ie 64 bits should be
achieved for all ECU at least an alignment of 4 Bytes should be achieved An efficient
alignment is highly hardware dependent
SWSSomeIpXf00016 dIf more data than expected are handed over to the
SOMEIP transformer during deserialization of data the unexpected data shall be dis
carded The known fraction shall be considered cSRSXfrm00101
SWSSomeIpXf00017 dIf less data than expected are handed over to the SOMEIP
transformer during deserialization of data the following shall happen
if for the corresponding ISignal an initial value is specified in serialized form
use the value to fill the missing elements at the end of the serialized stream
if no initial value is available abort deserialization with
ESERMALFORMEDMESSAGE 
cSRSXfrm00101
Missing data can only be recognized by comparing the length of received serialized
data with the expected length of the data SWSSomeIpXf00017 enables extensions
of data by adding elements to the end and achieve backward compatibility of an ECU
with older boardnet layouts that are missing those data
In the following the serialization of different parameters is specified
30 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00306 Serialization based on NetworkRepresentation dIf a
networkRepresentationProps is defined according to TPSSYST02136 on the
ISignal  then the SOMEIP serialization shall be based on the networkRepresen
tationProps cSRSXfrm00101
Note
For details refer to chapter Network Representation in 7
SWSSomeIpXf00307 Serialization based on ImplementationDataTypes dIf no
networkRepresentationProps is defined on the ISignal  then according to
TPSSYST02137 the SOMEIP serialization shall be based on the Implementa
tionDataType scSRSXfrm00101
7241 Basic Datatypes
SWSSomeIpXf00036 dTheSwBaseType s defined in 8 and according to TPS
STDT00067 placed in the package AUTOSARPlatformBaseTypes eg AU
TOSARPlatformBaseTypesuint32  whihc shall be supported for serialization
are listed in Table 78 cSRSXfrm00101
Type Description Size bit Remark
boolean TRUEFALSE value 8 FALSE 0 TRUE 1
uint8 unsigned Integer 8
uint16 unsigned Integer 16
uint32 unsigned Integer 32
uint64 unsigned Integer 64
sint8 signed Integer 8
sint16 signed Integer 16
sint32 signed Integer 32
sint64 signed Integer 64
float32 floating point number 32 IEEE 754 binary32 Single Preci
sion
float64 floating point number 64 IEEE 754 binary64 Double Preci
sion
Table 78 SwBaseType s supported for serialization
The Byte Order is specified common for all parameters by byteOrder ofSOMEIP
TransformationDescription  See chapter 722
7242 Structured Datatypes structs
SWSSomeIpXf00042 dA struct shall be serialized in order of depthfirst traversal c
SRSXfrm00101
The transformer doesnt automatically align parameters of a struct
31 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Insert reservedpadding elements into the AUTOSAR data type if needed for alignment
since the SOMEIP implementation shall not automatically add such padding
So if for example a struct includes a uint8 and a uint32 they are just written sequentially
into the buffer This means that there is no padding between the uint8 and the first byte
of the uint32 therefore the uint32 might not be aligned So the system designer has
to consider to add padding elements to the data type to achieve the required alignment
or set it globally
Warning about unaligned structs or similar shall not be done in the implementation but
only in the tool chain used to generate the implementation
Messages of legacy busses like CAN and FlexRay are usually not aligned Warnings
can be turned off or be ignored in such cases
The SOMEIP transformer does not automatically insert dummypadding elements
SOMEIP allows to add a length field of 8 16 or 32 bit in front of structs The length
field of a struct describes the number of bytes of the struct This allows for extensible
structs which allow better migration of interfaces
SWSSomeIpXf00216 dIf attribute sizeOfStructLengthFields ofSOMEIP
TransformationISignalProps is set to a value greater 0 a length field shall be
inserted in front of every serialized struct cSRSXfrm00101
Note
SWSSomeIpXf00216 also applies to nested structs which means that additionally
every nested struct has its own length field Furthermore in an array of structs where
all structs have the same length the length field is inserted in front of every struct inside
the array
SWSSomeIpXf00252 dIf attribute sizeOfStructLengthField ofSOMEIP
TransformationProps is set to a value greater 0 a length field shall be inserted
in front of the serialized struct for which the SOMEIPTransformationProps is de
fined See TPSSYST02121 cSRSXfrm00101
Note
SWSSomeIpXf00252 applies if the length fields of the struct and all nested structs
contained within the root struct are configured to different values for the lengths of the
length fields via SOMEIPTransformationProps 
SWSSomeIpXf00217 dThe data type of the length field of the struct and all nested
structs within the struct shall be the same and shall be determined by the value
ofSOMEIPTransformationISignalProps sizeOfStructLengthFields of the
serialized ISignal 
uint8 ifsizeOfStructLengthFields equals 1
uint16 ifsizeOfStructLengthFields equals 2
uint32 ifsizeOfStructLengthFields equals 4
32 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
cSRSXfrm00101
SWSSomeIpXf00253 dIf SOMEIPTransformationProps sizeOf
StructLengthField is present for a struct the data type for the length field of
the struct shall be determined by the value of SOMEIPTransformationProps 
sizeOfStructLengthField 
uint8 ifsizeOfStructLengthField equals 1
uint16 ifsizeOfStructLengthField equals 2
uint32 ifsizeOfStructLengthField equals 4
Otherwise SWSSomeIpXf00217 applies
cSRSXfrm00101
SWSSomeIpXf00218 dThe serializing SOMEIP transformer shall write the size in
bytes of the serialized struct without the size of the length field into the length field of
the structcSRSXfrm00101
SWSSomeIpXf00219 dIf the length is greater than the expected length of a struct
as specified in the data type definition a deserializing SOMEIP transformer shall only
interpret the expected data and skip the unexpected cSRSXfrm00101
To determine the start of the next expected data following the skipped unexpected part
the SOMEIP transformer can use the supplied length information
Struct1  
uint32 a  
float32 b2  
Struct2 c  Struct2  
uint32 d  
float32 e2  
Struct3 f  serialization  uint32 a  
float32 b1  
float32 b2  
uint32 d  
float32 e1  
float32 e2  
 
Figure 74 Serialization of Structs without Length Fields Example
33 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Struct1  
uint32 a  
float32 b2  
Struct2 c  Struct2  
uint32 d  
float32 e2  
Struct3 f  serialization  uint16 lf1  
float32 b1  
float32 b2  
uint32 d  
float32 e1  
float32 e2  
 uint32 a  
uint16 lf2  
uint16 lf3  
Figure 75 Serialization of Structs with Length Fields Example
7243 Structured Datatypes and Arguments with Identifier and optional Mem
bers
Please note that the content of this chapter has draft character
To achieve enhanced forward and backward compatibility an additional Data ID can
be added in front of struct members or method arguments The receiver then can
skip unknown membersarguments ie where the Data ID is unknown New member
sarguments can be added at arbitrary positions when Data IDs are transferred in the
serialized byte stream
Structs are modeled in the Software Component Template using an Implementa
tionDataType of category STRUCTURE and members are represented by Imple
mentationDataTypeElement s Method arguments are represented by Argument
DataPrototypes Refer to 9 for more details
The assignment of Data IDs is modeled in the System Template in the context of
SOMEIPTransformationISignalProps  Refer to 7 for more details
Moreover the usage of Data IDs allows describing structs with optional members To
serialize data with optional members the transformer has to know which optional mem
bers are available or not This is stored in a bitfield which is contained inside the Im
plementationDataType This availabilityBitfield is realized as array of uint8
Whether an optional member is actually present in the struct or not must be deter
mined during runtime
In addition to the Data ID a wire type encodes the datatype of the following member
Data ID and wire type are encoded in a socalled tag
34 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00267 dThe length of a tag shall be two bytes cSRSXfrm00106
SWSSomeIpXf00268 dThe tag shall consist of
reserved Bit 7 of the first byte
wire type Bit 64 of the first byte
Data ID Bit 30 of the first byte and bit 70 of the second byte
Bit 7 is the highest significant bit of a byte bit 0 is the lowest significant bit of a byte c
SRSXfrm00106
Note
Refer to Figure 76 for the layout of the tag
Wire TypeData ID Higher
Sig PartData ID Lower Sig  Part Length Field 81632 bit Member Data 
Byte n Byte n  1 Byte n  2 7 0 7 071531 0reserved
Figure 76 SOMEIP Struct Tag Layout
SWSSomeIpXf00269 dThe lower significant part of the Data ID of the member
shall be encoded in bits 70 of the second byte of the tag The higher significant part of
the Data ID of the member shall be encoded in bits 30 of the first byte cSRSXfrm
00106
Example The Data ID of the member is 1266 dec Then bits 30 of the first byte are
set to 0x4 The second byte is set to 0xF2
SWSSomeIpXf00270 dThe wire type shall determine the type of the following data
of the member The value shall be assigned as shown in Table 79 cSRSXfrm
00106
Wire Type Value
0 8 Bit Data Base data type
1 16 Bit Data Base data type
2 32 Bit Data Base data type
3 64 Bit Data Base data type
4 Complex Data Type Array Struct String Union with length
field of static size configured in data definition
5 Complex Data Type Array Struct String Union with length
field size 1 byte ignore static definition
6 Complex Data Type Array Struct String Union with length
field size 2 byte ignore static definition
7 Complex Data Type Array Struct String Union with length
field size 4 byte ignore static definition
Table 79 Message Types
35 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Note
Wire type 4 ensures the compatibility with the current approach where the size of length
fields is statically configured This approach has the drawback that changing the size
of the length field during evolution of interfaces is always incompatible Thus wire
types 5 6 and 7 allow to encode the size of the used length field in the transferred byte
stream
SWSSomeIpXf00271 dIfSOMEIPTransformationISignalProps isDynami
cLengthFieldSize is set to false or is not defined the transformer shall use wire
type 4 for serializing complex types and shall use the fixed size length fields The size of
the length fields is defined in SOMEIPTransformationISignalProps sizeOfAr
rayLengthFields sizeOfStructLengthFields andsizeOfUnionLength
Fields cSRSXfrm00106
SWSSomeIpXf00272 dSOMEIPTransformationISignalProps isDynami
cLengthFieldSize is set to true the transformer shall use wire types 567 for
serializing complex types and shall chose the size of the length field according to this
wire typecSRSXfrm00106
SWSSomeIpXf00273 dA deserializer shall always be able to handle the wire types
4 5 6 and 7 independent of the setting of SOMEIPTransformationISignalProps 
isDynamicLengthFieldSize cSRSXfrm00106
SWSSomeIpXf00274 dIf a Data ID is defined for an ArgumentDataPrototype
orImplementationDataTypeElement by means of SOMEIPTransformation
ISignalProps tlvDataId id a tag shall be inserted in the serialized byte stream c
SRSXfrm00106
Note
regarding existence of Data IDs refer to 7
SWSSomeIpXf00275 dIf the datatype of the serialized member  argument is a
basic datatype wire types 03 and a Data ID is configured the tag shall be inserted
directly in front of the memberargument No length field shall be inserted into the
serialized stream cSRSXfrm00106
SWSSomeIpXf00276 dIf the datatype of the serialized memberargument is not a
basic datatype wire type 47 and a Data ID is configured the tag shall be inserted in
front of the length field cSRSXfrm00106
SWSSomeIpXf00277 dIf the datatype of the serialized memberargument is not a
basic datatype and a Data ID is configured a length field shall always be inserted in
front of the memberargument cSRSXfrm00106
Rationale The length field is required to skip unknown membersarguments during
deserialization
SWSSomeIpXf00278 dThe length field shall always contain the length up to the
next tag of the struct but does not include the tag size and length field size itself c
SRSXfrm00106
36 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00279 dIf the member itself is of type struct there shall be exactly
one length fieldcSRSXfrm00106
SWSSomeIpXf00280 dIf the member itself is of type dynamic length string there
shall be exactly one length field cSRSXfrm00106
SWSSomeIpXf00281 dIf the member itself is of type fixed length string there
shall be exactly one length field corresponding to dynamic length strings cSRSXfrm
00106
Note
When serialized without tag fixed length strings do not have a length field For the
serialization with tag a length field is also required for fixed length strings in the same
way as for dynamic length strings
SWSSomeIpXf00282 fDRAFTgdIf the member itself is of type dynamic length ar
ray there shall be exactly one length field cSRSXfrm00106
SWSSomeIpXf00283 dIf the member itself is of type fixed length array there shall
be exactly one length field cSRSXfrm00106
SWSSomeIpXf00284 dIf the member itself is of type union there shall be exactly
one length fieldcSRSXfrm00106
SWSSomeIpXf00285 dFor the serialization of extensible structs and methods the
length field shall cover the size of the type field data and padding bytes if the member
itself is of type union cSRSXfrm00106
Note
For the serialization without tags the length field of unions does not cover the type
field see SWSSomeIpXf00226 For the serialization with tags it is required that
the complete content of the serialized union is covered by the length field
SWSSomeIpXf00286 dA member of a nonextensible standard struct which is of
type extensible struct shall be serialized according to the requirements for extensible
structscSRSXfrm00106
SWSSomeIpXf00287 dA member of an extensible struct which is of type non
extensible standard struct shall be serialized according to the requirements for stan
dard structscSRSXfrm00106
SWSSomeIpXf00288 dFor the serialization of extensible structs and methods no
alignment shall be applied cSRSXfrm00106
Rationale When alignment greater 8 bits is used the serializer may add padding bytes
after variable length data The padding bytes are not covered by the length field If the
receiver does not know the Data ID of the member it also does not know that it is
variable length data and that there might be padding bytes
SWSSomeIpXf00289 dIf the attribute isStructWithOptionalElement of the
ImplementationDataType representing the extensible struct is set to true the
37 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
transformer shall ignore the first ImplementationDataTypeElement and shall not se
rialize or deserialize it cSRSXfrm00106
Rationale the first ImplementationDataTypeElement represents the availability
bitfield which is not transferred on the wire
SWSSomeIpXf00290 dThe transformer shall only serialize an optional member of
a struct if the corresponding bit in the availability bitfield is set as follows
availabilityBitfieldpos8  1pos mod 8  0
cSRSXfrm00106
SWSSomeIpXf00291 dIf an optional member is available in the serialized byte
stream the transformer shall set the corresponding bit in the availability bitfield as
follows
availabilityBitfieldpos8  availabilityBitfieldpos8  1pos mod 8
cSRSXfrm00106
SWSSomeIpXf00292 dIf an optional member is not available in the serialized byte
stream the transformer shall clear the corresponding bit in the availability bitfield as
follows
availabilityBitfieldpos8  availabilityBitfieldpos8  1pos mod 8
cSRSXfrm00106
In the requirements SWSSomeIpXf00288 SWSSomeIpXf00289 and SWS
SomeIpXf00290 pos is the position of the optional ImplementationDataType
Element among all optional ImplementationDataTypeElement s within the Im
plementationDataType starting with pos  0
Note
Nonoptional ImplementationDataTypeElement s do not count since they do not
need a bit in the availabilityBitfield So the bit position within the availabilityBitfield
is determined by the order of the optional ImplementationDataTypeElement s
Examples
1st optional ImplementationDataTypeElement pos0
availabilityBitfield0  0x01  0
8th optional ImplementationDataTypeElement pos7
availabilityBitfield0  0x80  0
9th optional ImplementationDataTypeElement pos8
availabilityBitfield1  0x01  0
SWSSomeIpXf00295 dIf an optional member is not available in the received se
rialized byte stream the transformer shall keep the memory section occupied by this
optional element without modification cSRSXfrm00106
38 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00293 dIf the transformer reads an unknown Data ID ie not con
tained in its data definition it shall skip the unknown memberargument by using the
information of the wire type and length field cSRSXfrm00106
SWSSomeIpXf00294 dIf the transformer cannot find a required ie nonoptional
member defined in its data definition in the serialized byte stream the deserialization
shall be aborted with ESERMALFORMEDMESSAGE  For examples please refer to
10cSRSXfrm00106
7244 Strings
SWSSomeIpXf00053 dStrings shall be encoded using Unicode and terminated
with a
textbackslash0character
for both fixedlength and dynamiclength strings Unused space shall be filled using
0cSRSXfrm00101
SWSSomeIpXf00054 dDifferent Unicode encoding shall be supported including
UTF8 UTF16BE and UTF16LE Since these encoding have a dynamic length of
bytes per character the maximum length in bytes is up to three times the length of
characters in UTF8 plus 1 Byte for the termination with a 0 or two times the length
of the characters in UTF16 plus 2 Bytes for a 0 UTF8 character can be up to 6
bytes and an UTF16 character can be up to 4 bytes cSRSXfrm00101
SWSSomeIpXf00055 dUTF16LE and UTF16BE strings shall be zero terminated
with a
textbackslash0character
 This means they shall end with at least two 0x00 Bytes cSRSXfrm00101
SWSSomeIpXf00056 dUTF16LE and UTF16BE strings shall have an even
lengthcSRSXfrm00101
SWSSomeIpXf00057 dFor UTF16LE and UTF16BE strings having an odd length
the last byte shall be silently removed by the receiving SOMEIP transformer cSRS
Xfrm00101
SWSSomeIpXf00248 dIn case of UTF16LE and UTF16BE strings having an odd
length after removal of the last byte the two bytes before shall be 0x00 bytes termi
nation for a string to be valid cSRSXfrm00101
SWSSomeIpXf00058 dAll strings shall always start with a Byte Order Mark BOM
The BOM shall be included in fixedlengthstrings as well as dynamiclength strings c
SRSXfrm00101
For the specification of BOM see 11 and 12 Please note that the BOM is used in
the serialized strings to achieve compatibility with Unicode
39 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00239 dThe String specific serialization will only be triggered if
an Unicode String is detected and implementsLegacyStringSerialization is
false cSRSXfrm00101
For the details of the recognition and serialization of fixed and dynamiclength strings
see chapter 72441 and chapter 72442
SWSSomeIpXf00059 dThe receiving SOMEIP transformer implementation shall
check the BOM and handle a missing BOM or a malformed BOM as an error cSRS
Xfrm00101
SWSSomeIpXf00060 dThe BOM shall be added by the SOMEIP sending trans
former implementation cSRSXfrm00101
72441 Strings fixed length
The length of the string this includes the 0 in Bytes is specified in the data type
definition
SWSSomeIpXf00240 Recognition of UTF8 Fixed Length Strings dAn UTF8
Fixed Length String shall be detected if an ApplicationPrimitiveDataType and
anImplementationDataType with the following pattern are used
ApplicationPrimitiveDataType
withcategory equal to STRING
ApplicationPrimitiveDataType swDataDefProps swTextProps 
baseType refers to a BaseType withbaseTypeDefinition baseType
Encoding equal to UTF8
ImplementationDataType
withcategory ARRAY
that contains exactly one ImplementationDataTypeElement that boils
down to a uint8 ImplementationDataType 
ImplementationDataTypeElement arraySize is set to a value
ImplementationDataTypeElement arraySizeSemantics is set
tofixedSize
cSRSXfrm00101
SWSSomeIpXf00241 Recognition of UTF16 Fixed Length Strings dAn UTF16
Fixed Length String shall be detected if an ApplicationPrimitiveDataType and
anImplementationDataType with the following pattern are used
ApplicationPrimitiveDataType
withcategory equal to STRING
40 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
ApplicationPrimitiveDataType swDataDefProps swTextProps 
baseType refers to a BaseType withbaseTypeDefinition baseType
Encoding equal to UTF16
ImplementationDataType
withcategory ARRAY
that contains exactly one ImplementationDataTypeElement that boils
down to a uint16 ImplementationDataType 
ImplementationDataTypeElement arraySize is set to a value
ImplementationDataTypeElement arraySizeSemantics is set
tofixedSize
cSRSXfrm00101
SWSSomeIpXf00244 Serialization of fixed length strings dSerialization of fixed
length strings shall consist of the following steps
1 Check whether the string terminates with 0x00 UTF8 or 0x0000 UTF16 If
not a ESERGENERICERROR error shall be issued
2 Appending BOM at the beginning of the output buffer if BOM is not already avail
able in the first three UTF8 or two UTF16 bytes of the to be serialized array
containing the string If the BOM is already present simply copy the BOM into
the output buffer
3 Copying the string data the number of bytes according to the strings fixed length
from the array into the output buffer optionally performing a conversion between
UTF16LE and UTF16BE between ECU and network byte order if BaseTypeDi
rectDefinition byteOrder andSOMEIPTransformationDescription 
byteOrder have different values
cSRSXfrm00101
SWSSomeIpXf00246 Deserialization of fixed length strings dDeserialization of
fixed length strings shall consist of the following steps
1 Check whether the string starts with a BOM If not a MALFORMEDMESSAGE error
shall be issued
2 Check whether BOM has the same value as SOMEIPTransformationDe
scription byteOrder  If not a MALFORMEDMESSAGE error shall be issued
3 Remove the BOM
4 Silently discard the last byte of the string in case of an UTF16 string with odd
length
5 Check whether the string terminates with 0x00 UTF8 or 0x0000 UTF16 If
not a MALFORMEDMESSAGE error shall be issued
41 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
6 Copy the string data the number of bytes according to the strings fixed length
from the input buffer into the array optionally performing a conversion between
UTF16LE and UTF16BE between network and ECU byte order if BaseTypeDi
rectDefinition byteOrder andSOMEIPTransformationDescription 
byteOrder have different values
cSRSXfrm00101
72442 Strings dynamic length
Strings with dynamic length can be realized in an AUTOSAR system as an array with
dynamic length that transports the single characters
SWSSomeIpXf00242 Recognition of UTF8 Variable Length Strings dAn UTF8
Fixed Length String shall be detected if an ApplicationPrimitiveDataType and
anImplementationDataType with the following pattern are used
ApplicationPrimitiveDataType
withcategory equal to STRING
ApplicationPrimitiveDataType swDataDefProps swTextProps 
baseType refers to a BaseType withbaseTypeDefinition baseType
Encoding equal to UTF8
ImplementationDataType
TheImplementationDataType shall be defined according to TPSSWCT
01650 as a STRUCTURE that contains exactly two Implementation
DataTypeElement s and shall follow the rules defined by constr1318
oneImplementationDataTypeElement represents the Size Indica
tor and has the category equal to TYPEREFERENCE which points to a
uint8 uint16 or uint32 ImplementationDataType
oneImplementationDataTypeElement has the category equal to
ARRAY and contains exactly one ImplementationDataTypeElement
that boils down to a uint8 ImplementationDataType
cSRSXfrm00101
SWSSomeIpXf00243 Recognition of UTF16 Variable Length Strings dAn
UTF16 Fixed Length String shall be detected if an ApplicationPrimitive
DataType and an ImplementationDataType with the following pattern are used
ApplicationPrimitiveDataType
withcategory equal to STRING
ApplicationPrimitiveDataType swDataDefProps swTextProps 
baseType refers to a BaseType withbaseTypeDefinition baseType
Encoding equal to UTF16
42 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
ImplementationDataType
TheImplementationDataType shall be defined according to TPSSWCT
01650 as a STRUCTURE that contains exactly two Implementation
DataTypeElement s and shall follow the rules defined by constr1318
oneImplementationDataTypeElement represents the Size Indica
tor and has the category equal to TYPEREFERENCE which points to a
uint8 uint16 or uint32 ImplementationDataType
oneImplementationDataTypeElement has the category equal to
ARRAY and contains exactly one ImplementationDataTypeElement
that boils down to a uint16 ImplementationDataType
cSRSXfrm00101
SWSSomeIpXf00245 Serialization of dynamic length strings dSerialization of
dynamic length strings shall consist of the followign steps
1 Check whether the string terminates with 0x00 UTF8 or 0x0000 UTF16 If
not a ESERGENERICERROR error shall be issued
2 Add the Length Field  The value of the length field shall be computed by multi
plying the number of elements given by the size indicator with the size in bytes of
each element ie 1 for UTF8 and 2 for UTF16 increased by the size in bytes
required by the BOM The data type of the length field shall be determined from
thesizeOfStringLengthFields  If the attribute sizeOfStringLength
Fields is not configured then the default value of 32 bit shall be used as de
fined by PRSSOMEIP00094 The value of the length field shall comply with
SWSSomeIpXfCONSTR0001
3 Appending BOM at the beginning if BOM is not already available in the first 3
UTF8 or 2 UTF16 bytes of the to be serialized array containing the string If
the BOM is already present simply copy the BOM into the output buffer
4 Copying the string data copy the the number of bytes according to the strings
size indicator and the size of bytes of each element from the array into the out
put buffer optionally performing a conversion between UTF16LE and UTF16BE
between ECU and network byte order BaseTypeDirectDefinition byte
Order andSOMEIPTransformationDescription byteOrder have differ
ent values
cSRSXfrm00101
SWSSomeIpXf00247 Deserialization of dynamic length strings
dDeserialization of dynamic length strings shall consist of the following steps
1 Check whether the string starts with a BOM If not a MALFORMEDMESSAGE error
shall be issued
2 Check whether BOM has the same value as SOMEIPTransformationDe
scription byteOrder  If not a MALFORMEDMESSAGE error shall be issued
43 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
3 Remove the BOM and reduce the value of the length field accordingly
4 Silently discard the last byte of the string in case of an UTF16 string with odd
length according to the reduced value of the length field
5 Check whether the string terminates with 0x00 UTF8 or 0x0000 UTF16 If
not a MALFORMEDMESSAGE error shall be issued
6 Check whether the length of the received dynamic length string is less or
equal than the specified maximum length of the string ApplicationPrimitive
DataTypeswTextPropsswMaxTextSize or arraySize of ImplementationDataType
Element of category ARRAY If not a MALFORMEDMESSAGE error shall be
issued
7 Copy the string data copy the number of bytes according to the strings reduced
value of the length field from the input buffer into the array optionally perform
ing a conversion between UTF16LE and UTF16BE between ECU and bus
ifBaseTypeDirectDefinition byteOrder andSOMEIPTransformation
Description byteOrder have different values
cSRSXfrm00101
Instead of transferring application strings as SOMEIP strings with BOM and 0 ter
mination strings can also be transported as plain dynamic length arrays without BOM
and 0 termination see chapter Dynamic Length Arrays of 13
Please note that this requires the full string handling eg endianness conversion to
be done in the applications This can also be achieved by setting the attribute im
plementsLegacyStringSerialization to true In CP this attribute is configured
inSOMEIPTransformationISignalProps  in AP it is configured in ApSomeip
TransformationProps 
NOTE This attribute is not future safe and will be removed in an upcoming AUTOSAR
release Therefore to be forward compatible plain dynamic length arrays should
preferably be used in this case
7245 Arrays fixed length
SWSSomeIpXf00069 dThe length of fixed length arrays is defined by the datatype
definitioncSRSXfrm00101
They can be seen as repeated elements In chapter 7247 dynamic length arrays are
shown which can be also used Fixed length arrays are easier for use in very small
devices Dynamic length arrays might need more resources on the ECU using them
SOMEIP allows to add a length field of 8 16 or 32 bit in front of arrays The length field
of an array describes the number of bytes of the array This allows extensible arrays
which allow better migration of interfaces
44 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00220 dIf attribute sizeOfArrayLengthFields ofSOMEIP
TransformationISignalProps is set to a value greater 0 a length field shall be
inserted in front of every serialized array cSRSXfrm00101
Note
SWSSomeIpXf00220 also applies to nested arrays which means that additionally
every nested fixedsize array has its own length field
SWSSomeIpXf00256 dIf attribute sizeOfArrayLengthField ofSOMEIP
TransformationProps is set to a value greater 0 a length field shall be inserted
in front of the serialized array for which the SOMEIPTransformationProps is de
fined See TPSSYST02121 cSRSXfrm00101
Note
SWSSomeIpXf00256 applies if the length fields of the array and all nested ar
rays contained are configured to different values for the lengths of the length fields
via SOMEIPTransformationProps
SWSSomeIpXf00257 dIf SOMEIPTransformationProps sizeOfAr
rayLengthField is present for a static size array the data type for the length
field of the array shall be determined by the value of SOMEIPTransformation
Props sizeOfArrayLengthField 
uint8 ifsizeOfArrayLengthField equals 1
uint16 ifsizeOfArrayLengthField equals 2
uint32 ifsizeOfArrayLengthField equals 4
Otherwise SWSSomeIpXf00221 applies
cSRSXfrm00101
SWSSomeIpXf00221 dThe data type of the length field for an array shall be
determined by the value of SOMEIPTransformationISignalProps sizeOfAr
rayLengthFields of the serialized ISignal 
uint8 ifsizeOfArrayLengthFields equals 1
uint16 ifsizeOfArrayLengthFields equals 2
uint32 ifsizeOfArrayLengthFields equals 4
cSRSXfrm00101
SWSSomeIpXf00222 dThe serializing SOMEIP transformer shall write the size in
bytes of the serialized array without the size of the length field into the length field of
the arraycSRSXfrm00101
SWSSomeIpXf00223 dIf the length is greater than the expected length of an array
as specified in the data type definition a deserializing SOMEIP transformer shall only
interpret the expected data and skip the unexpected cSRSXfrm00101
45 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
To determine the start of the next expected data following the skipped unexpected part
the SOMEIP transformer can use the supplied length information
72451 Onedimensional
The onedimensional arrays with fixed length n carry exactly n elements of the same
type The layout is shown in Figure 77
SWSSomeIpXf00070 dA onedimensional array with fixed length shall be serial
ized by concatenating the array elements in order cSRSXfrm00101
Static  Array an  
Element1  Element2  Element3  Elementn  
 
element  size e byte 
n  e 
Figure 77 Onedimensional array fixed length
72452 Multidimensional
SWSSomeIpXf00072 dThe serialization of multidimensional arrays shall happen
in rowmajor orderinmemory layout of multidimensional arrays in the C programming
languagecSRSXfrm00101
Static  Array anm  
Element1  Element2  Elementn  
 
e 
n   m  e   E11 E12  E1m 
m  e  
Figure 78 Multidimensional array fixed length
Consult AUTOSAR SWS RTE chapter 5344 for Arrays
46 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
7246 Optional Parameters  Optional Elements
Optional Elements can be encoded as array with 0 to 1 elements For the serialization
of arrays with dynamic length see Chapter 7247
7247 Dynamic Length Arrays  Variable Size Arrays
Variable size arrays are implemented in AUTOSAR as structs with two members
a size indicator which is an integer and holds the number of valid elements in the
array
the array with variable size
In SOMEIP variable size arrays are implemented in a similar manner Only the size
indicator is replaced by a length indicator
a length indicator which is an integer and holds the length in bytes of the follow
ing variable size array
the array which contains the valid elements of the variable size array
In AUTOSAR also so called oldworld variablesize array data types exist which dont
have a size indicator These are not supported by data transformation in general and
hence also not supported by the SOMEIP transformer For details refer to con
str1387 7 System Template TPSSWCT01644 TPSSWCT01645 TPS
SWCT01642 and TPSSWCT01643
SWSSomeIpXf00076 dA variable size array embedded in a structure which also
contains a size indicator shall be serialized as the concatenation of the following ele
ments
the length indicator which holds the length in bytes of the following variable size
array
the array which contains the valid elements of the variable size array
where
the data type of the length field shall be determined as specified in
SWSSomeIpXf00234
the array shall be serialized like a static size array but does only contain the valid
elements The number of elements to serializer shall be taken from the size
indicator
cSRSXfrm00101
SWSSomeIpXf00234 dA variable size array is represented in AUTOSAR by an
ImplementationDataType with the category STRUCTURE and two subelements
namely payload and size indicator  The data type of the length fields for the
47 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SOMEIP message for an variable size array shall be determined from the sizeOfAr
rayLengthFields  If the attribute sizeOfArrayLengthFields is not configured
then the default value of 32 bit shall be used as defined by PRSSOMEIP00945
In case of nested variable size arrays AUTOSAR allows to use profiles to specify size
indicators which apply to more than one variable size array nested within the same
ImplementationDataType  Depending on the specific profile  dynamicArray
SizeProfile  the data type of the of the length fields inside the SOMEIP message
shall be determined differently
VSALINEAR
The data type of the SOMEIP length field shall be determined from the single
sizeOfArrayLengthFields  If the attribute sizeOfArrayLengthFields is
not configured then the default value of 32 bit shall be used as defined by PRS
SOMEIP00945
VSASQUARE
All data type of the SOMEIP length fields shall be determined from the single
sizeOfArrayLengthFields  If the attribute sizeOfArrayLengthFields is
not configured then the default value of 32 bit shall be used as defined by PRS
SOMEIP00945
VSARECTANGULAR
The data type of all SOMEIP length fields for all dimensions nesting level shall
be determined from the single sizeOfArrayLengthFields  If the attribute
sizeOfArrayLengthFields is not configured then the default value of 32 bit
shall be used as defined by PRSSOMEIP00945
VSAFULLYFLEXIBLE
The data type of all SOMEIP length fields for all variable size arrays shall be de
termined from the single sizeOfArrayLengthFields  If the attribute sizeO
fArrayLengthFields is not configured then the default value of 32 bit shall be
used as defined by PRSSOMEIP00945
cSRSXfrm00101 SRSXfrm00008
This means only the first melements of the variable size array are serialized where mis
the value of the size indicator
The layout of dynamic arrays is shown in 79 and Figure 710 where L1 andL2
denote the length in bytes
48 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Element1   
element  size e 
n byte Length  n 
816 or 32 bit Element2  Element3  Elementn  
Figure 79 Onedimensional array dynamic length Example
In the onedimensional array one length field is used which carries the size in bytes of
the valid elements in the array
SWSSomeIpXf00235 dIf the value of dynamicArraySizeProfile equals
VSALINEAR  the value of the length field of the serialized variable size array shall
be calculated based on the value of the size indicator of the AUTOSAR data type c
SRSXfrm00101 SRSXfrm00008
The number of static length elements can be easily calculated by dividing the array
length n by the Byte size of an element
In the case of dynamical length elements the number of elements cannot be calculated
but the elements must be parsed sequentially
Elementa 1jk1  
L1 byte  Length n  
816 or 32 bit E11 E12 E1k1   L1 Elementa2jk2  
E11 E12 E1k2   L2  
L2 byte  
n byte  
Figure 710 Multidimensional array dynamic length Example
In case of multidimensional variable size arrays each variable size array needs to
have its own length field independent of the way how the variable size array is de
signed in the AUTOSAR data type ie independent from the value of dynamicAr
raySizeProfile  as specified in SWSSomeIpXf00234 Hence it is supported to
have different length columns and different length rows in the same dimension See
k1 andk2 in Figure 710
SWSSomeIpXf00236 dIf the value of dynamicArraySizeProfile of a multi
dimensional variable size array equals VSASQUARE  the value of all length fields of
the nested serialized variable size arrays that belong to this multidimensional variable
size arrays shall be calculated based on the value of the single size indicator of the
AUTOSAR data type cSRSXfrm00101 SRSXfrm00008
49 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
In case of VSASQUARE  the AUTOSAR data type only has one size indicator The
value of this size indicator will be used as base for the calculation for the value of all
length fields of such a multidimensional variable size array
SWSSomeIpXf00237 dIf the value of dynamicArraySizeProfile of a multi
dimensional variable size array equals VSARECTANGULAR  the values of all length
fields of the nested serialized variable size arrays of the same nesting level ie the
same dimension that belong to this multidimensional variable size array shall be cal
culated based on the values of the size indicators of the AUTOSAR data type for this
respective nesting level cSRSXfrm00101 SRSXfrm00008
In case of VSARECTANGULAR  the AUTOSAR data type has exactly one size indicator
for each dimension of the the multidimensional variable size array For all variable size
arrays in one dimension the value of the according size indicator of this dimension will
be used as base for the calculation of the values of all length fields of this dimension
SWSSomeIpXf00238 dIf the value of dynamicArraySizeProfile of a multi
dimensional variable size array equals VSAFULLYFLEXIBLE  the values of all length
fields of the nested serialized variable size arrays that belong to this multidimensional
variable size arrays shall be calculated based on the value of the size indicator of the
corresponding variable size array that is contained in the AUTOSAR data type cSRS
Xfrm00101 SRSXfrm00008
In case of VSAFULLYFLEXIBLE  in the AUTOSAR data type the outer variable size
array and each nested variable size arrays has its own size indicator For the calculation
of the values of the length fields both of the outer and all nested variable size arrays
the according values of the size indicators of the AUTOSAR data type will be used as
base
The RTE provides a buffer where serialization result will be written into by the SOMEIP
transformer which is large enough to keep the length field and a fully filled dynamic
array
7248 Bitfield
SWSSomeIpXf00300 dBitfields shall be transported as basic datatypes
uint8uint16uint32 c
7249 Union  Variant
A union also called variant is a parameter that can contain different types of elements
For example if one defines a union of type uint8 and type uint16 the union shall carry
an element of uint8 or uint16
The union serialization will only be triggered if the pattern defined in
SWSSomeIpXf00249 applies
50 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00249 dA union shall be detected if an Implementation
DataType with the following pattern named wrapped union data type is used Im
plementationDataType with category STRUCTURE that contains exactly two Im
plementationDataTypeElement s
memberSelector ImplementationDataTypeElement which represents the
type field that boils down to a uint8 uint16 or uint32 Implementation
DataType
payload ImplementationDataTypeElement of category UNION which rep
resents the actual union
cSRSXfrm00101
When using different types of elements the alignment of subsequent parameters may
be distorted To resolve this padding might be needed
SWSSomeIpXf00088 dThe default serialization layout of unions in SOMEIP is
shown in Table 710 cSRSXfrm00101
Length field optional
Type field
Element including padding sizeofpadding  length  sizeofelement
Table 710 Default serialization layout of unions
SOMEIP allows to add a length field of 8 16 or 32 bit in front of unions The length
field of a union describes the number of bytes in the union
This allows the deserializer to quickly calculate the position where the data after the
union begin in the serialized data stream This gets necessary if the union con
tains data which are larger than expected for example if a struct was extended with
appended new members and only the first old members are deserialized by the
SOMEIP transformer
SWSSomeIpXf00224 dIf attribute sizeOfUnionLengthFields ofSOMEIP
TransformationISignalProps is set to a value greater 0 a length field shall be
inserted in front of every serialized union cSRSXfrm00101
Note
SWSSomeIpXf00224 also applies to nested unions which means that additionally
every nested union has its own length field
SWSSomeIpXf00254 dIf attribute sizeOfUnionLengthField ofSOMEIP
TransformationProps is set to a value greater 0 a length field shall be inserted
in front of the serialized union for which the SOMEIPTransformationProps is de
fined See TPSSYST02121 cSRSXfrm00101
Note
SWSSomeIpXf00254 applies if the length fields of the union and all nested unions
51 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
contained within the root union are configured to different values for the lengths of the
length fields via SOMEIPTransformationProps 
SWSSomeIpXf00225 dThe data type of the length field of the union and all nested
unions within the union shall be determined by the value of SOMEIPTransforma
tionISignalProps sizeOfUnionLengthFields of the serialized ISignal 
uint8 ifsizeOfUnionLengthFields equals 1
uint16 ifsizeOfUnionLengthFields equals 2
uint32 ifsizeOfUnionLengthFields equals 4
cSRSXfrm00101
SWSSomeIpXf00258 dIfSOMEIPTransformationProps sizeOfUnion
LengthField is present for a union the data type of the length field for the union
shall be determined by the value of SOMEIPTransformationProps sizeOfU
nionLengthField 
uint8 ifsizeOfUnionLengthFields equals 1
uint16 ifsizeOfUnionLengthFields equals 2
uint32 ifsizeOfUnionLengthFields equals 4
Otherwise SWSSomeIpXf00225 applies
cSRSXfrm00101
SWSSomeIpXf00226 dThe serializing SOMEIP transformer shall write the size in
bytes of the serialized union including padding bytes but without the size of the length
field and type field into the length field of the union This requirement does not apply
for the serialization of extensible structs and methods cSRSXfrm00101
Note
See also chapter 7243
SWSSomeIpXf00227 dIf the length is greater than the expected length of a union
as specified in the data type definition a deserializing SOMEIP transformer shall only
interpret the expected data and skip the unexpected cSRSXfrm00101
To determine the start of the next expected data following the skipped unexpected part
the SOMEIP transformer can use the supplied length information
The length of the type field shall be 32 16 8 or 0 bits
The type field describes the type of the element
SWSSomeIpXf00250 dThe data type of the type field of the union shall be
determined from the ImplementationDataType of the first Implementation
DataTypeElement memberSelector in the wrapped union data type defined in
SWSSomeIpXf00249 cSRSXfrm00101
52 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00098 dPossible values of the type field are defined by the data
type specification of the union The types are encoded as in the data type in ascending
order starting with 1 The 0 is reserved for the NULL type  ie an empty union c
SRSXfrm00101
SWSSomeIpXf00251 dThe value of the type field shall be set to the value defined
by the first ImplementationDataTypeElement memberSelector in the wrapped
union data type defined in SWSSomeIpXf00249 cSRSXfrm00101
SWSSomeIpXf00099 dThe element is serialized depending on the type in the type
field This also defines the length of the data All bytes behind the data that are covered
by the length are padding The deserializer shall skip the padding bytes by calculat
ing the required number according to the formula given in SWSSomeIpXf00088 c
SRSXfrm00101
By using a struct in the data type definition different padding layouts can be achieved
72491 Example Union of uint8uint16 both padded to 32 bit
In this example a length of the length field is specified as 32 bits The union shall
support a uint8 and a uint16 as elements Both are padded to the 32 bit boundary
length4 Bytes
A uint8 will be serialized like this
Length  4 Bytes
Type  1
uint8 Padding 0x00 Padding 0x00 Padding 0x00
A uint16 will be serialized like this
Length  4 Bytes
Type  2
uint16 Padding 0x00 Padding 0x00
73 Protocol specification
This chapter describes the protocol of SOMEIP for ClientServer and SenderReceiver
communication
731 ClientServer Communication
SWSSomeIpXf00106 dFor the SOMEIP request message the SOMEIP trans
former on the clientECU has to do the following for payload and header
53 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Construct the payload
Optionally set the Request ID to a unique number shall be unique for client only
Set the Protocol Version according SWSSomeIpXf00029
Set the Interface Version If interfaceVersion ofSOMEIPTransforma
tionISignalProps is set this shall be used Otherwise interfaceVersion
ofSOMEIPTransformationDescription shall be used
Set the Message Type to Request ie 0x00 
Set the Return Code to 0x00
cSRSXfrm00102
SWSSomeIpXf00120 dTo construct the payload of a request message all argu
ment s of the ClientServerOperation which have direction IN orINOUT shall
be serialized according to the order of the ArgumentDataPrototype s within the
ClientServerOperation cSRSXfrm00102
This can be seen graphically in Figure 711
SomeIpXf XfId  
  transactionHandle  
  buffer 
  bufferLength  
  ININOUT argument1  
   
  ININOUT argumentN  
 SOMEIP  
Header  
argument 1 
 
argument N 
Payload  
Figure 711 Example for serialization of a ClientServer Request
SWSSomeIpXf00200 dIfcsErrorReaction ofTransformationISignal
Props is set to autonomous and the returnValue parameter handed over
from RTE is greater or equal to 0x80  the SOMEIP transformer for a response
of a clientserver communication shall generate an error message according to
SWSSomeIpXf00201 else it shall generate a normal response according to
SWSSomeIpXf00107 cSRSXfrm00102
SWSSomeIpXf00107 dThe SOMEIP transformer on the serverECU builds its
header for the server response based on the header of the clients request and does in
addition
Construct the payload
Set the Message Type to RESPONSE ie0x80 
54 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
If the ClientServerOperation has at least one possibleError defined
place the return value of the executed ClientServerOperation into the Re
turn Code field and add 0x1F to adapt the number ranges in case the original
return value was different from 0x00 
cSRSXfrm00102
Note See also chapter 7237
SWSSomeIpXf00121 dTo construct the payload of a response message all argu
ment s of the ClientServerOperation which have direction INOUT orOUT shall
be serialized in the following order
TheArgumentDataPrototype s with a direction of INOUT orOUT shall be serialized
according to the order of the ArgumentDataPrototype s within the ClientServer
Operation cSRSXfrm00102
This can be seen graphically in Figure 712
SomeIpXf XfId  
  transactionHandle  
  buffer 
  bufferLength  
  returnValue  
  INOUTOUT argument1  
   
  INOUTOUT argumentN  
 SOMEIP  
Header  
argument1  
 
argumentN  
Payload  
Figure 712 Example for serialization of a ClientServer Response
SWSSomeIpXf00201 dThe SOMEIP transformer on the serverECU builds its
header for an autonomous error response based on the header of the clients request
and does in addition
Construct no payload the payload shall be empty
Set the Message Type to RESPONSE ie0x80 
Adapt the return value by subtracting 0x80 from the parameter returnValue
calculation adaptedReturnV alue returnV alue0x80
Place the adaptedReturnValue into the Return Code field
cSRSXfrm00102
Note See also chapter 7237
This leads to an output of the SOMEIP transformer which is exactly as long as the
SOMEIP header
55 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Note
Error messages can only be sent as a response for clientserver requests not for
SenderReceiver communication or error messages
SWSSomeIpXf00202 dA SOMEIP transformer on the serverECU that builds
an autonomous error response shall return with a return value equal to EOK See
SWSSomeIpXf00141 cSRSXfrm00102
If the SOMEIP transformer would return with a return code different from EOK this
would issue a hard error that prevents the RTE from sending the autonomous error
response
732 SenderReceiver Communication
Session Handling ID counter is used to set the correct Request ID in the SOMEIP
header in case of SenderReceiver communication where session handling is acti
vated
SWSSomeIpXf00212 dOne Session Handling ID counter 16 Bit has to
be maintained per transformer function for SenderReceiver communication see
SWSSomeIpXf00138 if sessionHandlingSR is set to sessionHandlingAc
tive cSRSXfrm00008
SWSSomeIpXf00213 dAll Session Handling ID counters shall be initialized with
0x0001 cSRSXfrm00008
SWSSomeIpXf00108 dThe SOMEIP transformer on the sender side of trans
formed SenderReceiver communication shall construct header and payload in the fol
lowing way
Construct the payload
Set the Request ID
to0x00 ifsessionHandlingSR ofSOMEIPTransformationISignal
Props is not set to sessionHandlingActive
the current value of the Session Handling ID counter otherwise
Set the Protocol Version according SWSSomeIpXf00029
Set the Interface Version If interfaceVersion ofSOMEIPTransforma
tionISignalProps is set this shall be used Otherwise interfaceVersion
ofSOMEIPTransformationDescription shall be used
Set the Message Type according to messageType ofSOMEIPTransforma
tionISignalProps 
NOTIFICATION 0x02  shall be used in the header if attribute mes
sageType is set to notification
56 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
REQUESTNORETURN 0x01  shall be used in the header if attribute mes
sageType is set to requestNoReturn
Set the Return Code to 0x00
cSRSXfrm00102
In SWSSomeIpXf00108 it is specified when session handling is considered for
messages which are sent The SOMEIP transformer never checks the session ID on
receiver side because the default behaviour of SOMEIP is for senderreceiver commu
nication to ignore session IDs on receiver side
SWSSomeIpXf00176 dThe payload of a message for SenderReceiver communi
cation shall consists of the serialized data element that is transported cSRSXfrm
00102
Error handling and return codes have to be implemented by the application when
needed
733 External Trigger Events
External trigger events are used to trigger RPCs without any IN INOUT or OUT ar
guments or to represent a special kind of an event without any parameters that is
transmitted from a server to one or more clients and at which occurrence the Service
Consumer shall react in a particular manner External trigger events are realized by
SOMEIP as fireandforget methods without arguments
SWSSomeIpXf00204 dThe SOMEIP transformer on the trigger source side of
transformed external trigger events shall construct header in the following way
Set the Request ID
to0x00 ifsessionHandlingSR ofSOMEIPTransformationISignal
Props is not set to sessionHandlingActive
the current value of the Session Handling ID counter otherwise
Set the Protocol Version according SWSSomeIpXf00029
Set the Interface Version If interfaceVersion ofSOMEIPTransforma
tionISignalProps is set this shall be used Otherwise interfaceVersion
ofSOMEIPTransformationDescription shall be used
Set the Message Type to REQUESTNORETURN ie0x01 
Set the Return Code to 0x00
cSRSXfrm00102
SWSSomeIpXf00205 dThe payload of a message for external trigger event com
munication shall be empty cSRSXfrm00102
57 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Error handling and return codes have to be implemented by the application when
needed
734 Error Handling
The error handling will be done solely in the application SOMEIP only transports the
errors
Two different mechanisms for error transportation are supported Return Code and
Error Message
SWSSomeIpXf00111 dThe SOMEIP transformer shall use the Return Code error
handlingcSRSXfrm00102 SRSXfrm00103
Exceptions are specified in SOMEIP but not yet supported by this version of the
SOMEIP transformer
This can be used to handle all different application errors that might occur in the server
In addition problems with the communication medium or intermediate components
eg switches may occur which have to be handled eg by means of reliable trans
port
All messages have a return code field to carry the return code However only re
sponses Message Types 0x80 and0x81  use this field to carry a return code to the
request Message Type 0x00  they answer All other messages set this field to 0x00
see Chapter 7236 For more detailed errors the layout of the Error Message Mes
sage Type 0x81  can carry specific fields for error handling eg an Exception String
Error Messages are sent instead of Response Messages
7341 Return Code
SWSSomeIpXf00112 dThe Error Handling via Return Code shall be based on the
StdReturnType cSRSXfrm00102
SWSSomeIpXf00113 dThe Return Codes shall only be used for ClientServer
communicationcSRSXfrm00102
SWSSomeIpXf00170 dIn case of ClientServer communication the Return Code
shall transport the ApplicationError s of the executed ClientServerOperation
if no SOMEIP error occurred cSRSXfrm00102
This means If a SOMEIP error occurred this error is contained in the Return Code If
no SOMEIP error occurred the Return Code contains the error or success code of
the executed server runnable
If an error occurs in case of clientserver communication the server can be configured
to create an autonomous error reaction which will be sent back to the client In that
58 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
response the SOMEIP header fields RequestId andInterface Version shall
be equal to the values in the header of the request message
This is realized by SWSSomeIpXf00201 which fills the header fields accordingly
RequestId is handed over from RTE and InterfaceVersion is consistent to the
request as the configuration of the SOMEIP transformer only allows the same inter
faceVersion for request and response
SWSSomeIpXf00115 dThe Return Codes of Table 711 are currently defined and
shall be implemented as described cSRSXfrm00102
ID Name Description
0x00 EOK No error occurred
0x01 ENOTOK An unspecified error occurred
0x04 SOMEIPXFENOTREADY Service ID and Method ID are known Application
not running
0x05 SOMEIPXFENOT
REACHABLESystem running the service is not reachable inter
nal error code only
0x06 SOMEIPXFETIMEOUT A timeout occurred internal error code only
0x07 SOMEIPXFEWRONG
PROTOCOL
VERSIONVersion of SOMEIP protocol not supported
0x08 SOMEIPXFEWRONG
INTERFACE
VERSIONInterface version mismatch
0x09 SOMEIPXFE
MALFORMEDMESSAGEDeserialization error so that payload cannot be de
serialized
0x0a SOMEIPXFE
WRONGMESSAGETYPEAn unexpected message type was received eg
REQUESTNORETURN for a method defined as
REQUEST
0x0b EE2E Not further specified E2E error
0x0c 
0x1fRESERVED Reserved for generic SOMEIP errors These errors
will be specified in future versions of this document
0x20 
0x5e Specific ApplicationError s of
ClientServerOperation s These errors are the
application errors specified by the ClientServer
Interface 
As the range of ApplicationError s of the
ClientServerInterface is0x010x3F  the
value of an ApplicationError has to be adapted
for transport over SOMEIP by adding 0x1F 
Table 711 Return Codes
7342 Communication Errors and Handling of Communication Errors
When considering the transport of ClientServer messages different reliability seman
tics exist
Maybe  the message might reach the communication partner
59 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
At least once  the message reaches the communication partner at least once
Exactly once  the message reaches the communication partner exactly once
When using these terms in regard to clientserver communication the term applies to
both messages ie call and response or error
While different implementations may implement different approaches SOMEIP trans
former currently achieves maybe reliability when using the UDP binding and exactly
once reliability when using the TCP binding by a suitable configuration of the Ethernet
modules Further error handling is left to the application
For maybe reliability only a single timeout is needed when using clientserver com
munication in combination with UDP as transport protocol Figure 713 shows the
state machines for maybe reliability The clients SOMEIP implementation has to
wait for the response for a specified timeout If the timeout occurs SOMEIP shall
signal SOMEIPXFETIMEOUT to the client application
Client 
Server WaitingForResponse 
processingError 
SOMEIPXFETIMEOUT 
Send ResponseResponse Timeout Send 
Request Response 
Received 
Request Received
Figure 713 State Machines for Reliability Maybe
For exactly once reliability the TCP binding may be used since TCP was defined to
allow for reliable communication
Additional mechanisms to reach higher reliability may be implemented in the applica
tion or in a SOMEIP implementation Keep in mind that the communication does not
have to implement these features Chapter 73421 describes such optional reliability
mechanisms
60 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
73421 Application based Error Handling
The application can easily implement at least once reliability by using idempotent
operations ie operation that can be executed multiple times without side effects
and using a simple timeout mechanism Figure 714 shows the state machines for
at least once reliability using implicit acknowledgements When the client sends out
the request it starts a timer with the timeout specified for the specific method If no
response is received before the timer expires round transition at the top the client
will retry the operation A Typical number of retries would be 2 so that 3 requests are
sent
The number of retries the timeout values and the timeout behavior constant or expo
nential back off are outside of the SOMEIP specification
Client 
Server WaitingForResponse 
processingError 
SOMEIPXFETIMEOUT No Response Received 
TimeoutCounter 
TimeoutCounter  n 
No Response received 
Send ResponseResponse 
Received 
Request ReceivedSend Request 
set TimeoutCounter  0 
Figure 714 State Machines for Reliability At least once idempotent operations
74 Reserved and special identifiers for SOMEIP and SOMEIP
SD
In this chapter an overview of reserved and special identifiers are shown
SWSSomeIpXf00130 dReserved and special ServiceIDs are defined in Table
712cSRSXfrm00008
ServiceID Description
0x0000 Reserved
61 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
0xFF00  0xFF1F Reserved for Testing at OEM
0xFF20  0xFF3F Reserved for Testing at Tier1
0xFF40  0xFF5F 0xFF5F Reserved for ECU Internal Communication Tier1
proprietary
0xFFFE Reserved for announcing nonSOMEIP service instances
0xFFFF SOMEIP and SOMEIPSD special service
Table 712 Reserved and special ServiceIDs
SWSSomeIpXf00131 dReserved and special InstanceIDs are defined in Table
713cSRSXfrm00008
InstanceID Description
0x0000 Reserved
0xFFFF All Instances
Table 713 Reserved and special InstanceIDs
SWSSomeIpXf00132 dReserved and special MethodIDsEventIDs are defined in
Table 714cSRSXfrm00008
MethodID Description
0x0000 Reserved
0x7FFF Reserved
0x8000 Reserved
0xFFFF Reserved
Table 714 Reserved and special MethodIDsEventIDs
SWSSomeIpXf00133 dMethodIDs and EventIDs of Service 0xFFFF are defined
in Table 715cSRSXfrm00008
MethodIDEvent
IDDescription
0x0000 SOMEIP Magic Cookie Messages
0x8000 SOMEIP Magic Cookie Messages
0x8100 SOMEIPSD messages events
Table 715 MethodIDs and EventIDs of Service 0xFFFF
SWSSomeIpXf00134 dBesides otherserv other names are supported by the con
figuration option Table 716 gives an overview of the reserved names cSRSXfrm
00008
Name Description
hostname Used to name a host or ECU
instancename Used to name an instance of a service
servicename Used to name a service
62 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
otherserv Used for nonSOMEIP Services
Table 716 Reserved names of configuration options
75 Error Classification
Section 75 Error Handling of the document General Specification of Basic Software
Modules describes the error handling of the Basic Software in detail Above all it
constitutes a classification scheme consisting of five error types which may occur in
14 SWS BSW General modules
Based on this foundation the following section specifies particular errors arranged in
the respective subsections below
751 Development Errors
SWSSomeIPxf00184 d
Type of error Related error code Error value
Error code if any other API service except Get
VersionInfo is called before the transformer
module was initialized with Init or after a call to De
InitSOMEIPXFEUNINIT 0x01
Error code if an invalid configuration set was
selectedSOMEIPXFEINITFAILED 0x02
API service called with wrong parameter SOMEIPXFEPARAM 0x03
API service called with invalid pointer SOMEIPXFEPARAMPOINTER 0x04
cSRSBSW00337
752 Runtime Errors
There are no runtime errors
753 Transient Faults
There are no transient faults
754 Production Errors
There are no production errors
63 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
755 Extended Production Errors
All Extended Production Errors valid for SOMEIP Transformer are specified in 3
ASWS Transformer General
64 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
8 API specification
81 Imported types
There are no imported types from other modules beyond those specified in 3 ASWS
Transformer General
In the Module Interlink Headers file which is imported by the SOMEIP Transformer all
ImplementationDataType s known to the RTE are included Using this mechanism
the SOMEIP Transformer knows all data types of data which shall be transformed
82 Type definitions
SWSSomeIpXf00183 d
Name SomeIpXfConfigType
Kind Structure
implementation specific
Type Elements
Comment 
Description This is the type of the data structure containing the initialization data for the transformer
Available via SomeIpXfh
cSRSBSW00404 SRSBSW00441
83 Function definitions
The SOMEIP transformer provides the specific interfaces generally required by 3
ASWS Transformer General
SWSSomeIpXf00150 dThe SOMEIP Transformer shall only provide functions for
transformers where the TransformationTechnology is referenced as the first ref
erence in the list of ordered references transformer from a DataTransformation
to aTransformationTechnology c
That means only the first transformer in a transformer chain can be a SOMEIP Trans
former because serializer transformer are in general only allowed to be the first trans
former in a chain
831 SomeIpXfExtractProtocolHeaderFields
SWSSomeIpXf91001 d
65 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Service Name SomeIpXfExtractProtocolHeaderFields
SyntaxStdReturnType SomeIpXfExtractProtocolHeaderFields 
const uint8 buffer
uint32 bufferLength
StdMessageTypeType messageType
StdMessageResultType messageResult

Service ID hex 0x05
SyncAsync Synchronous
Reentrancy Reentrant
buffer Buffer allocated by the RTE where the transformed data has to
be stored by the transformerParameters in
bufferLength Length of the buffer
Parameters inout None
messageType Canonical representation of the message type extracted from the
transformers protocol headerParameters out
messageResult Canonical representation of the message result type extracted
from the transformers protocol header
Return value StdReturnType EOK Relevant protocol header fields have been extracted
successfully
ENOTOK An error occurred during parsing of the SOMEIP
protocol header eg incorrect protocol version or insufficient
buffer length bufferLength smaller than minimal SOMEIPheader
length
Description Function to extract the relevant SOMEIP protocol header fields of the message and the type of
the message result  At the time being this is limited to the types used for CS communication
ie REQUEST and RESPONSE and OK and ERROR
Available via SomeIpXfh
cSRSXfrm00002
SWSSomeIpXf00296 dThe function SomeIpXfExtractProtocolHeader
Fields specified in SWSSomeIpXf91001 shall extract the type of a message and
the type of the message result from the SOMEIP protocol header and provide this in
formation in a canonical representation via its output arguments cSRSXfrm00002
SWSSomeIpXf00297 dThe function SomeIpXfExtractProtocolHeader
Fields specified in SWSSomeIpXf91001 shall check whether the provided
bufferLength is larger or equal than the size of the protocol header processed by
the SOMEIP transformer ie 8 bytes  If this is not the case ENOTOK shall be
returned Neither messageType normessageResult shall be modified in this case c
SRSXfrm00002
SWSSomeIpXf00298 dThe function SomeIpXfExtractProtocolHeader
Fields specified in SWSSomeIpXf91001 shall check whether the value of the
Protocol Version field see PRSSOMEIP00052 is equal to the value defined by
PRSSOMEIP00051  If this is not the case ENOTOK shall be returned Nei
thermessageType normessageResult shall be modified in this case cSRSXfrm
00002
66 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00299 dThe function SomeIpXfExtractProtocolHeader
Fields specified in SWSSomeIpXf91001 shall check whether the value of the
Message Type field see PRSSOMEIP00055 is equal REQUEST RESPONSE  or
ERROR   If this is not the case ENOTOK shall be returned Neither messageType
normessageResult shall be modified in this case cSRSXfrm00002
SWSSomeIpXf00301 dThe function SomeIpXfExtractProtocolHeader
Fields specified in SWSSomeIpXf91001 shall return EOK in all other cases c
SRSXfrm00002
SWSSomeIpXf00302 dThe function SomeIpXfExtractProtocolHead
erFields specified in SWSSomeIpXf91001 shall set messageType to
STDMESSAGETYPEREQUEST in case the value of the Message Type field see
PRSSOMEIP00055 is equal REQUEST cSRSXfrm00002
SWSSomeIpXf00303 dThe function SomeIpXfExtractProtocolHead
erFields specified in SWSSomeIpXf91001 shall set messageType to
STDMESSAGETYPERESULT in case the value of the Message Type field see
PRSSOMEIP00055 is equal RESULT orERROR cSRSXfrm00002
SWSSomeIpXf00304 dThe function SomeIpXfExtractProtocolHeader
Fields specified in SWSSomeIpXf91001 shall set messageResult to
STDMESSAGERESULTERROR in case the value of the Message Type field see
PRSSOMEIP00055 is equal to ERROR or if the value of the Return Code field
see PRSSOMEIP00058 is different from 0 cSRSXfrm00002
SWSSomeIpXf00305 dThe function SomeIpXfExtractProtocolHeader
Fields specified in SWSSomeIpXf91001 shall set messageResult to
STDMESSAGERESULTOK otherwise ie in case the value of the Message Type field
see PRSSOMEIP00055 is different from ERROR and if the value of the Return
Code field see PRSSOMEIP00058 is 0 cSRSXfrm00002
832 SomeIpXftransformerId
SWSSomeIpXf00138 d
Service Name SomeIpXftransformerId
Syntaxuint8 SomeIpXftransformerId 
uint8 buffer
uint32 bufferLength
paramtype dataElement

Service ID hex 0x03
SyncAsync Synchronous
Reentrancy Non Reentrant
Parameters in dataElement Data element which shall be transformed
Parameters inout None
5
67 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
buffer Buffer allocated by the RTE where the transformed data has to
be stored by the transformerParameters out
bufferLength Used length of the buffer
Return value uint8 0x00 EOK Serialization successful
0x81 ESERGENERICERROR A generic error occurred
Description This function transforms a SenderReceiver communication using the serialization of SOMEIP 
It takes the data element as input and outputs a uint8 array containing the serialized data
The length of the serialized data shall be calculated by the transformer during runtime and
returned in the OUT parameter bufferLength It may be smaller than the maximum buffer size
used by the RTE for buffer allocation
Available via SomeIpXfh
c
SWSSomeIpXf00228 dIn function SomeIpXftransformerId defined in
SWSSomeIpXf00138
paramtype is derived from type according to the parameter passing rules rules
defined by the 15 SRS BSW General see SRSBSW00484 SRSBSW
00485 and SRSBSW00486 and 14 SWS BSW General see SWS
BSW00186 and SWSBSW00187
type shall be the data type of the data element after all data conversion activities
of the RTE
transformerId shall be the name pattern for the transformer specified in
SWSXfrm00062 3 ASWS Transformer General
c
This function specified in SWSSomeIpXf00138 exists for each transformed
SenderReceiver communication which uses the SOMEIP serialization
SWSSomeIpXf00139 dThe function SomeIpXftransformerId specified in
SWSSomeIpXf00138 shall exist for the first reference in the list of ordered refer
ences transformer from a DataTransformation to aTransformationTech
nology if the DataTransformation is referenced by an ISignal in the role data
Transformation where the ISignal references a SystemSignal which is refer
enced by SenderReceiverToSignalMapping c
SWSSomeIpXf00140 dThe function SomeIpXftransformerId specified
in SWSSomeIpXf00138 shall serialize primitive or complex data elements of
SenderReceiver communication into a linear byte array representation using the
SOMEIP serialization c
SWSSomeIpXf00214 dAfter serialization of the data the function
SomeIpXftransformerId specified in SWSSomeIpXf00138 shall in
crement the Session Handling ID counter assigned to transformerId if
sessionHandlingSR is set to sessionHandlingActive c
68 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00215 dWhen the Session Handling ID counter assigned to
transformerId is 0xFFFF and gets incremented it shall rollover to 0x0001 in
stead of 0x0000 if sessionHandlingSR is set to sessionHandlingActive c
SWSSomeIpXf00141 d
Service Name SomeIpXftransformerId
Syntaxuint8 SomeIpXftransformerId 
const RteCsTransactionHandleType TransactionHandle
uint8 buffer
uint32 bufferLength
StdReturnType returnValue 
paramtype data1 
paramtype datan

Service ID hex 0x03
SyncAsync Synchronous
Reentrancy Non Reentrant
TransactionHandle Transaction handle according to SWSRte08732 clientId and
sequenceCounter needed to differentiate between multiple
requests
returnValue Return value from server side for transmission to the calling
client This argument is only available for serializers of the
response of a ClientServer communication if
the ClientServerOperation has at least one PossibleError
defined or
autonomous error reaction is activated
data1 ClientServer operation argument which shall be transformed in
the same order as in the corresponding interface
 Parameters in
datan ClientServer operation argument which shall be transformed in
the same order as in the corresponding interface
Parameters inout None
buffer Buffer allocated by the RTE where the transformed data has to
be stored by the transformerParameters out
bufferLength Used length of the buffer
Return value uint8 0x00 EOK Serialization successful
0x81 ESERGENERICERROR A generic error occurred
Description This function transforms a ClientServer communication using the serialization of SOMEIP  It
takes the operation arguments and optionally the return value as input and outputs a uint8 array
containing the serialized data
The length of the serialized data shall be calculated by the transformer during runtime and
returned in the OUT parameter bufferLength It may be smaller than the maximum buffer size
used by the RTE for buffer allocation
Available via SomeIpXfh
c
SWSSomeIpXf00229 dIn function SomeIpXftransformerId defined in
SWSSomeIpXf00141
69 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
paramtype is derived from type according to the parameter passing rules rules
defined by the 15 SRS BSW General see SRSBSW00484 SRSBSW
00485 and SRSBSW00486 and 14 SWS BSW General see SWS
BSW00186 and SWSBSW00187
type shall be the data type of the data element after all data conversion activities
of the RTE
transformerId shall be the name pattern for the transformer specified in
SWSXfrm00062 3 ASWS Transformer General
c
This function specified in SWSSomeIpXf00141 exists for the server and each client
of each transformed ClientServer communication which uses the SOMEIP serializa
tion
It exists on both the Client and the Server but the arguments are different
On the client it serializes the request of the ClientServer call There the data1  
datan arguments of the API correpsond to the INand INOUT arguments of the
ClientServerOperation  The argument returnValue doesnt exist
On the server it serializes the response of the ClientServer call There the data1 
datan arguments of the API correpsond to the INOUT andOUT arguments of the
ClientServerOperation  The argument returnValue exists here if at least one
PossibleError is defined for the ClientServerOperation because the return
code of the operation has to be transmitted
SWSSomeIpXf00142 dThe function SomeIpXftransformerId specified in
SWSSomeIpXf00141 shall exist for the first reference in the list of ordered refer
ences transformer from a DataTransformation to aTransformationTech
nology if the DataTransformation is referenced by an ISignal in the role
dataTransformation where the ISignal references a SystemSignal which
is referenced by ClientServerToSignalMapping in the callSignal orre
turnSignal c
Due to SWSSomeIpXf00142 the API of SWSSomeIpXf00141 exists both on
client and server
SWSSomeIpXf00143 dThe function SomeIpXftransformerId
symbolSuffix specified in SWSSomeIpXf00141 shall serialize all primi
tive or complex operation arguments and the return value if executed on server side of
ClientServer communication into a linear byte array representation using the SOMEIP
serializationc
SWSSomeIpXf00203 dThe function SomeIpXftransformerId
symbolSuffix specified in SWSSomeIpXf00141 shall ignore all argu
ments data1 datan if the return code is greater or equal to 0x80 because
they are not filled with meaningful values cSRSXfrm00105
70 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00206 d
Service Name SomeIpXftransformerId
Syntaxuint8 SomeIpXftransformerId 
uint8 buffer
uint32 bufferLength

Service ID hex 0x03
SyncAsync Synchronous
Reentrancy Reentrant
Parameters in None
Parameters inout None
buffer Buffer allocated by the RTE where the transformed data has to
be stored by the transformerParameters out
bufferLength Used length of the buffer
Return value uint8 0x00 EOK Serialization successful
0x81 ESERGENERICERROR A generic error occurred
Description This function transforms an external trigger event using the serialization of SOMEIP  It takes
trigger as input and outputs a uint8 array
The length of the transformed data shall be calculated by the transformer during runtime and
returned in the OUT parameter bufferLength It may be smaller than the maximum buffer size
used by the RTE for buffer allocation
Available via SomeIpXfh
cSRSXfrm00002
SWSSomeIpXf00230 dIn function SomeIpXftransformerId defined in
SWSSomeIpXf00206
transformerId shall be the name pattern for the transformer specified in
SWSXfrm00062 3 ASWS Transformer General
c
This function specified in SWSSomeIpXf00206 exists on the trigger source side for
each transformed external trigger event which uses SOMEIP transformation
SWSSomeIpXf00207 dThe function SomeIpXftransformerId specified in
SWSSomeIpXf00206 shall exist for the first referenced TransformationTech
nology in the ordered transformerChain of a DataTransformation if the
DataTransformation is referenced by an ISignal in the role dataTransfor
mation where the ISignal references a SystemSignal which is referenced by a
TriggerToSignalMapping cSRSXfrm00002
SWSSomeIpXf00208 dThe function SomeIpXftransformerId specified in
SWSSomeIpXf00206 shall serialize an external trigger event into a linear byte array
representation using the SOMEIP serialization cSRSXfrm00002
As an external trigger event consists of an ISignal with length equal to zero the
serialized SOMEIP message only contains a header but no payload
71 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
833 SomeIpXfInvtransformerId
SWSSomeIpXf00144 d
Service Name SomeIpXfInvtransformerId
Syntaxuint8 SomeIpXfInvtransformerId 
const uint8 buffer
uint32 bufferLength
type dataElement

Service ID hex 0x04
SyncAsync Synchronous
Reentrancy Reentrant
buffer Buffer allocated by the RTE where the still serialized data are
stored by the RteParameters in
bufferLength Used length of the buffer
Parameters inout None
Parameters out dataElement Data element which is the result of the transformation and
contains the deserialized data element
Return value uint8 0x00 EOK Deserialization successful
0x01 ENODATA No data available which can be deserialized
0x81 ESERGENERICERROR A generic error occurred
0x87 ESERWRONGPROTOCOLVERSION The version of
the receiving transformer didnt match the sending transformer
0x88 ESERWRONGINTERFACEVERSION Interface
version of serialized data is not supported
0x89 ESERMALFORMEDMESSAGE The received
message is malformed The transformer is not able to produce an
output
0x8a ESERWRONGMESSAGETYPE The received
message type was not expected
Description This function deserializes a SenderReceiver communication using the deserialization of
SOMEIP  It takes the uint8 array containing the serialized data as input and outputs the original
data element which will be passed to the RTE
Available via SomeIpXfh
c
SWSSomeIpXf00231 dIn function SomeIpXfInvtransformerId defined
in SWSSomeIpXf00144
type shall be the data type of the data element before all data conversion activi
ties of the RTE
transformerId shall be the name pattern for the transformer specified in
SWSXfrm00062 3 ASWS Transformer General
c
This function specified in SWSSomeIpXf00144 exists for each transformed
SenderReceiver communication which uses the SOMEIP serialization
SWSSomeIpXf00146 dThe function SomeIpXfInvtransformerId speci
fied in SWSSomeIpXf00144 shall exist for the first reference in the list of ordered
72 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
references transformer from a DataTransformation to aTransformation
Technology if the DataTransformation is referenced by an ISignal in the role
dataTransformation where the ISignal references a SystemSignal which is
referenced by SenderReceiverToSignalMapping c
SWSSomeIpXf00147 dThe function SomeIpXfInvtransformerId spec
ified in SWSSomeIpXf00144 shall deserialize a linear byte array to primitive or
complex data elements of SenderReceiver communication using the SOMEIP dese
rializationc
SWSSomeIpXf00264 dIfSomeIpXfInvtransformerId specified in
SWSSomeIpXf00144 is called with buffer equal to NULLPTR and buffer
Length equal to 0 the output buffer buffer shall not be changed and
SomeIpXfInvtransformerId shall return with ENODATA cSRSXfrm
00001 SRSXfrm00004
SWSSomeIpXf00145 d
Service Name SomeIpXfInvtransformerId
Syntaxuint8 SomeIpXfInvtransformerId 
RteCsTransactionHandleType TransactionHandle
const uint8 buffer
uint32 bufferLength
StdReturnType returnValue 
paramtype data 

Service ID hex 0x04
SyncAsync Synchronous
Reentrancy Reentrant
buffer Buffer allocated by the RTE where the still serialized data are
stored by the RteParameters in
bufferLength Used length of the buffer
Parameters inout None
TransactionHandle Transaction handle according to SWSRte08732 clientId and
sequenceCounter needed to differentiate between multiple
requests
returnValue Return value from server side for transmission to the calling
client This argument is only available for serializers of the
response of a ClientServer communication if
the ClientServerOperation has at least one PossibleError
defined or
autonomous error reaction is activatedParameters out
data ClientServer operation argument which shall be transformed in
the same order as in the corresponding interface
5
73 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Return value uint8 0x00 EOK Deserialization successful
0x01 ENODATA No data available which can be deserialized
0x81 ESERGENERICERROR A generic error occurred
0x87 ESERWRONGPROTOCOLVERSION The version of
the receiving transformer didnt match the sending transformer
0x88 ESERWRONGINTERFACEVERSION Interface
version of serialized data is not supported
0x89 ESERMALFORMEDMESSAGE The received
message is malformed The transformer is not able to produce an
output
0x8a ESERWRONGMESSAGETYPE The received
message type was not expected
Description This function deserializes a ClientServer communication using the deserialization of SOMEIP 
It takes the uint8 array containing the serialized data as input and outputs the return value of
the server runnable and the operation arguments which have to be passed from the server to
the client
Available via SomeIpXfh
c
SWSSomeIpXf00232 dIn function SomeIpXfInvtransformerId defined
in SWSSomeIpXf00145
paramtype is derived from type according to the parameter passing rules rules
defined by the 15 SRS BSW General see SRSBSW00484 SRSBSW
00485 and SRSBSW00486 and 14 SWS BSW General see SWS
BSW00186 and SWSBSW00187
type shall be the data type of the data element before all data conversion activi
ties of the RTE
transformerId shall be the name pattern for the transformer specified in
SWSXfrm00062 3 ASWS Transformer General
c
This function specified in SWSSomeIpXf00145 exists for the server and each client
of each transformed ClientServer communication which uses the SOMEIP serializa
tion
It exists on both the Client and the Server but the arguments are different
On the server it deserializes the request of the ClientServer call There the data1 
datan arguments of the API correpsond to the INandINOUT arguments of the
ClientServerOperation  The argument returnValue doesnt exist
On the client it deserializes the response of the ClientServer call There the data1 
datan arguments of the API correpsond to the INOUT andOUT arguments of the
ClientServerOperation  The argument returnValue exists here if at least one
PossibleError is defined for the ClientServerOperation because the return
code of the operation has to be transmitted
SWSSomeIpXf00148 d
74 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
The function SomeIpXfInvtransformerId specified in
SWSSomeIpXf00145 shall exist for the first reference in the list of ordered
references transformer from a DataTransformation to aTransformation
Technology if the DataTransformation is referenced by an ISignal in the
role dataTransformation where the ISignal references a SystemSignal
which is referenced by ClientServerToSignalMapping in the callSignal or
returnSignal c
Due to SWSSomeIpXf00148 the API of SWSSomeIpXf00145 exists both on
client and server
SWSSomeIpXf00149 dThe function SomeIpXfInvtransformerId spec
ified in SWSSomeIpXf00145 shall deserialize a linear byte array which contains
primitive or complex operation arguments and the return value if executed on client
side of ClientServer communication using the SOMEIP deserialization c
SWSSomeIpXf00265 dIfSomeIpXfInvtransformerId specified in
SWSSomeIpXf00145 is called with buffer equal to NULLPTR and buffer
Length equal to 0 the output buffer buffer shall not be changed and
SomeIpXfInvtransformerId shall return with ENODATA cSRSXfrm
00001 SRSXfrm00004
SWSSomeIpXf00209 d
Service Name SomeIpXfInvtransformerId
Syntaxuint8 SomeIpXfInvtransformerId 
const uint8 buffer
uint32 bufferLength

Service ID hex 0x04
SyncAsync Synchronous
Reentrancy Reentrant
buffer Buffer allocated by the RTE where the still serialized data are
stored by the RteParameters in
bufferLength Used length of the buffer
Parameters inout None
Parameters out None
Return value uint8 0x00 EOK Deserialization successful
0x01 ENODATA No data available which can be deserialized
0x81 ESERGENERICERROR A generic error occurred
0x87 ESERWRONGPROTOCOLVERSION The version of
the receiving transformer didnt match the sending transformer
0x88 ESERWRONGINTERFACEVERSION Interface
version of serialized data is not supported
0x89 ESERMALFORMEDMESSAGE The received
message is malformed The transformer is not able to produce an
output
0x8a ESERWRONGMESSAGETYPE The received
message type was not expected
Description This function deserializes an external trigger event using the deserialization of SOMEIP 
Available via SomeIpXfh
cSRSXfrm00002
75 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
SWSSomeIpXf00233 dIn function SomeIpXfInvtransformerId defined
in SWSSomeIpXf00209
transformerId shall be the name pattern for the transformer specified in
SWSXfrm00062 3 ASWS Transformer General
c
This function specified in SWSSomeIpXf00209 exists on the trigger sink side for
each transformed external trigger event which uses SOMEIP transformation
SWSSomeIpXf00210 dThe function SomeIpXfInvtransformerId speci
fied in SWSSomeIpXf00209 shall exist for the first referenced Transformation
Technology in the ordered transformerChain of aDataTransformation if the
DataTransformation is referenced by an ISignal in the role dataTransfor
mation where the ISignal references a SystemSignal which is referenced by a
TriggerToSignalMapping cSRSXfrm00002
SWSSomeIpXf00211 dThe function SomeIpXfInvtransformerId spec
ified in SWSSomeIpXf00209 shall deserialize a linear byte array to an external
trigger event using the SOMEIP deserialization cSRSXfrm00002
SWSSomeIpXf00266 dIfSomeIpXfInvtransformerId specified in
SWSSomeIpXf00209 is called with buffer equal to NULLPTR and buffer
Length equal to 0 the output buffer buffer shall not be changed and
SomeIpXfInvtransformerId shall return with ENODATA cSRSXfrm
00001 SRSXfrm00004
As an external trigger event consists of an ISignal with length  64 Bit the serialized
SOMEIP message only contains a header but no payload
834 SomeIpXfInit
SWSSomeIpXf00181 d
Service Name SomeIpXfInit
Syntaxvoid SomeIpXfInit 
const SomeIpXfConfigType config

Service ID hex 0x01
SyncAsync Synchronous
Reentrancy Reentrant
Parameters in config Pointer to the transformers configuration data
Parameters inout None
Parameters out None
Return value None
Description This service initializes the transformer for the further processing
5
76 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Available via SomeIpXfh
cSRSBSW00407 SRSBSW00411
835 SomeIpXfDeInit
SWSSomeIpXf00182 d
Service Name SomeIpXfDeInit
Syntaxvoid SomeIpXfDeInit 
void

Service ID hex 0x02
SyncAsync Synchronous
Reentrancy Reentrant
Parameters in None
Parameters inout None
Parameters out None
Return value None
Description This service deinitializes the transformer
Available via SomeIpXfh
cSRSBSW00407 SRSBSW00411
836 SomeIpXfGetVersionInfo
SWSSomeIpXf00180 d
Service Name SomeIpXfGetVersionInfo
Syntaxvoid SomeIpXfGetVersionInfo 
StdVersionInfoType VersionInfo

Service ID hex 0x00
SyncAsync Synchronous
Reentrancy Reentrant
Parameters in None
Parameters inout None
Parameters out VersionInfo Pointer to where to store the version information of this module
Return value None
Description This service returns the version information of the called transformer module
Available via SomeIpXfh
cSRSBSW00407 SRSBSW00411
77 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
84 Callback notifications
There are no callback notifications
85 Scheduled functions
SOMEIP Transformer has no scheduled functions
86 Expected interfaces
There are no expected interfaces
78 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
9 Sequence diagrams
There are no sequence diagrams applicable to SOMEIP Transformer
79 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
10 Configuration specification
There is no module specific configuration available to the SOMEIP Transformer The
EcuC defined in 3 ASWS Transformer General shall be used
SWSSomeIpXf00185 dTheapiServicePrefix of the SOMEIP transformers
EcuC shall be set to SomeIpXf cSRSBSW00159
80 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
A Referenced Meta Classes
For the sake of completeness this chapter contains a set of class tables representing
metaclasses mentioned in the context of this document but which are not contained
directly in the scope of describing specific metamodel semantics
Class ApplicationArrayDataType
Package M2AUTOSARTemplatesSWComponentTemplateDatatypeDatatypes
Note An application data type which is an array each element is of the same application data type
Tags atprecommendedPackageApplicationDataTypes
Base ARElement ARObject ApplicationCompositeDataType ApplicationDataType AtpBlueprint Atp
Blueprintable AtpClassifier AtpType AutosarDataType CollectableElement Identifiable Multilanguage
Referrable PackageableElement Referrable
Attribute Type Mult Kind Note
dynamicArray
SizeProfileString 01 attr Specifies the profile which the array will follow if it is a
variable size array
element ApplicationArray
Element01 aggr This association implements the concept of an array
element That is in some cases it is necessary to be able
to identify single array elements eg as input values for
an interpolation routine
Table A1 ApplicationArrayDataType
Class ApplicationError
Package M2AUTOSARTemplatesSWComponentTemplatePortInterface
Note This is a userdefined error that is associated with an element of an AUTOSAR interface It is specific for
the particular functionality or service provided by the AUTOSAR software component
Base ARObject Identifiable MultilanguageReferrable Referrable
Attribute Type Mult Kind Note
errorCode Integer 01 attr The RTE generator is forced to assign this value to the
corresponding error symbol Note that for error codes
certain ranges are predefined see RTE specification
Table A2 ApplicationError
Class ApplicationPrimitiveDataType
Package M2AUTOSARTemplatesSWComponentTemplateDatatypeDatatypes
Note A primitive data type defines a set of allowed values
Tags atprecommendedPackageApplicationDataTypes
Base ARElement ARObject ApplicationDataType AtpBlueprint AtpBlueprintable AtpClassifier AtpType 
AutosarDataType CollectableElement Identifiable MultilanguageReferrable PackageableElement 
Referrable
Attribute Type Mult Kind Note
    
Table A3 ApplicationPrimitiveDataType
81 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Class ArgumentDataPrototype
Package M2AUTOSARTemplatesSWComponentTemplatePortInterface
Note An argument of an operation much like a data element but also carries direction information and is
owned by a particular ClientServerOperation
Base ARObject AtpFeature AtpPrototype AutosarDataPrototype DataPrototype Identifiable Multilanguage
Referrable Referrable
Attribute Type Mult Kind Note
direction ArgumentDirection
Enum01 attr This attribute specifies the direction of the argument
prototype
serverArgument
ImplPolicyServerArgumentImpl
PolicyEnum01 attr This defines how the argument type of the servers
RunnableEntity is implemented
If the attribute is not defined this has the same semantics
as if the attribute is set to the value useArgumentType for
primitive arguments and structures
Table A4 ArgumentDataPrototype
Enumeration ArraySizeSemanticsEnum
Package M2AUTOSARTemplatesCommonStructureImplementationDataTypes
Note This type controls how the information about the number of elements in an ApplicationArrayDataType
is to be interpreted
Literal Description
fixedSize This means that the ApplicationArrayDataType will always have a fixed number of elements
Tags atpEnumerationLiteralIndex0
variableSize This implies that the actual number of elements in the ApplicationArrayDataType might vary at
runtime The value of arraySize represents the maximum number of elements in the array
Tags atpEnumerationLiteralIndex1
Table A5 ArraySizeSemanticsEnum
Class AutosarDataType abstract
Package M2AUTOSARTemplatesSWComponentTemplateDatatypeDatatypes
Note Abstract base class for user defined AUTOSAR data types for software
Base ARElement ARObject AtpClassifier AtpType CollectableElement Identifiable Multilanguage
Referrable PackageableElement Referrable
Subclasses AbstractImplementationDataType ApplicationDataType
Attribute Type Mult Kind Note
swDataDef
PropsSwDataDefProps 01 aggr The properties of this AutosarDataType
Table A6 AutosarDataType
Class BaseType abstract
Package M2MSRAsamHdoBaseTypes
Note This abstract metaclass represents the ability to specify a platform dependent base type
Base ARElement ARObject CollectableElement Identifiable MultilanguageReferrable Packageable
Element Referrable
Subclasses SwBaseType
Attribute Type Mult Kind Note
5
82 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class BaseType abstract
baseType
DefinitionBaseTypeDefinition 1 aggr This is the actual definition of the base type
Tags
xmlroleElementfalse
xmlroleWrapperElementfalse
xmlsequenceOffset20
xmltypeElementfalse
xmltypeWrapperElementfalse
Table A7 BaseType
Class BaseTypeDirectDefinition
Package M2MSRAsamHdoBaseTypes
Note This BaseType is defined directly as opposite to a derived BaseType
Base ARObject BaseTypeDefinition
Attribute Type Mult Kind Note
baseType
EncodingBaseTypeEncoding
String01 attr This specifies how an object of the current BaseType is
encoded eg in an ECU within a message sequence
Tags xmlsequenceOffset90
baseTypeSize PositiveInteger 01 attr Describes the length of the data type specified in the
container in bits
Tags xmlsequenceOffset70
byteOrder ByteOrderEnum 01 attr This attribute specifies the byte order of the base type
Tags xmlsequenceOffset110
memAlignment PositiveInteger 01 attr This attribute describes the alignment of the memory
object in bits Eg 8 specifies that the object in
question is aligned to a byte while 32 specifies that it is
aligned four byte If the value is set to 0 the meaning
shall be interpreted as unspecified
Tags xmlsequenceOffset100
native
DeclarationNativeDeclarationString 01 attr This attribute describes the declaration of such a base
type in the native programming language primarily in the
Programming language C This can then be used by a
code generator to include the necessary declarations into
a header file For example
BaseType with shortName MyUnsignedInt native
Declaration unsigned short
Results in
typedef unsigned short MyUnsignedInt
If the attribute is not defined the referring Implementation
DataTypes will not be generated as a typedef by RTE
If a nativeDeclaration type is given it shall fulfill the
characteristic given by basetypeEncoding and baseType
Size
This is required to ensure the consistent handling and
interpretation by software components RTE COM and
MCM systems
Tags xmlsequenceOffset120
Table A8 BaseTypeDirectDefinition
83 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Class ClientServerInterface
Package M2AUTOSARTemplatesSWComponentTemplatePortInterface
Note A clientserver interface declares a number of operations that can be invoked on a server by a client
Tags atprecommendedPackagePortInterfaces
Base ARElement ARObject AtpBlueprint AtpBlueprintable AtpClassifier AtpType CollectableElement 
Identifiable MultilanguageReferrable PackageableElement PortInterface Referrable
Attribute Type Mult Kind Note
operation ClientServerOperation  aggr ClientServerOperations of this ClientServerInterface
Stereotypes atpVariation
Tags vhlatestBindingTimeblueprintDerivationTime
possibleError ApplicationError  aggr Application errors that are defined as part of this interface
Table A9 ClientServerInterface
Class ClientServerOperation
Package M2AUTOSARTemplatesSWComponentTemplatePortInterface
Note An operation declared within the scope of a clientserver interface
Base ARObject AtpClassifier AtpFeature AtpStructureElement Identifiable MultilanguageReferrable 
Referrable
Attribute Type Mult Kind Note
argument
orderedArgumentDataPrototype  aggr An argument of this ClientServerOperation
Stereotypes atpVariation
Tags vhlatestBindingTimeblueprintDerivationTime
diagArgIntegrity Boolean 01 attr This attribute shall only be used in the implementation of
diagnostic routines to support the case where input and
output arguments are allocated in a shared buffer and
might unintentionally overwrite input arguments by
tentative write operations to output arguments
This situation can happen during sliced execution or while
output parameters are arrays call by reference The
value true means that the ClientServerOperation is aware
of the usage of a shared buffer and takes precautions to
avoid unintentional overwrite of input arguments
If the attribute does not exist or is set to false the Client
ServerOperation does not have to consider the usage of a
shared buffer
possibleError ApplicationError  ref Possible errors that may by raised by the referring
operation
Table A10 ClientServerOperation
Class ClientServerToSignalMapping
Package M2AUTOSARTemplatesSystemTemplateDataMapping
Note This element maps the ClientServerOperation to call and returnSystemSignals
Base ARObject DataMapping
Attribute Type Mult Kind Note
callSignal SystemSignal 1 ref Reference to the callSignal to which the IN and INOUT
ArgumentDataPrototypes are mapped
5
84 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class ClientServerToSignalMapping
clientServer
OperationClientServerOperation 1 iref Reference to a ClientServerOperation which is mapped
to a call SystemSignal and a return SystemSignal
InstanceRef implemented by OperationInSystem
InstanceRef
returnSignal SystemSignal 01 ref Reference to the returnSignal to which the OUT and
INOUT ArgumentDataPrototypes are mapped
Table A11 ClientServerToSignalMapping
Class DataPrototype abstract
Package M2AUTOSARTemplatesSWComponentTemplateDatatypeDataPrototypes
Note Base class for prototypical roles of any data type
Base ARObject AtpFeature AtpPrototype Identifiable MultilanguageReferrable Referrable
Subclasses ApplicationCompositeElementDataPrototype AutosarDataPrototype
Attribute Type Mult Kind Note
swDataDef
PropsSwDataDefProps 01 aggr This property allows to specify data definition properties
which apply on data prototype level
Table A12 DataPrototype
Class DataTransformation
Package M2AUTOSARTemplatesSystemTemplateTransformer
Note A DataTransformation represents a transformer chain It is an ordered list of transformers
Base ARObject Identifiable MultilanguageReferrable Referrable
Attribute Type Mult Kind Note
data
Transformation
KindDataTransformationKind
Enum01 attr This attribute controls the kind of DataTransformation to
be applied
executeDespite
Data
UnavailabilityBoolean 1 attr Specifies whether the transformer chain is executed even
if no input data are available
transformer
Chain orderedTransformation
Technology1 ref This attribute represents the definition of a chain of
transformers that are supposed to be executed according
to the order of being referenced from DataTransformation
Table A13 DataTransformation
Enumeration DataTransformationErrorHandlingEnum
Package M2AUTOSARTemplatesSWComponentTemplateSwcInternalBehaviorPortAPIOptions
Note This enumeration defines different ways how a RunnableEntity shall handle transformer errors
Literal Description
noTransformerError
HandlingA runnable does not handle transformer errors
Tags atpEnumerationLiteralIndex0
transformerError
HandlingThe runnable implements the handling of transformer errors
Tags atpEnumerationLiteralIndex1
Table A14 DataTransformationErrorHandlingEnum
85 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Class EcucModuleDef
Package M2AUTOSARTemplatesECUCParameterDefTemplate
Note Used as the toplevel element for configuration definition for Software Modules including BSW and RTE
as well as ECU Infrastructure
Tags atprecommendedPackageEcucModuleDefs
Base ARElement ARObject AtpBlueprint AtpBlueprintable AtpDefinition CollectableElement Ecuc
DefinitionElement Identifiable MultilanguageReferrable PackageableElement Referrable
Attribute Type Mult Kind Note
apiServicePrefix CIdentifier 01 attr For CDD modules this attribute holds the apiService
Prefix
The shortName of the module definition of a Complex
Driver is always Cdd Therefore for CDD modules the
module apiServicePrefix is described with this attribute
container EcucContainerDef  aggr Aggregates the toplevel container definitions of this
specific module definition
Stereotypes atpSplitable
Tags
atpSplitkeycontainershortName
xmlsequenceOffset11
postBuildVariant
SupportBoolean 01 attr Indicates if a module supports different postbuild variants
previously known as postbuild selectable configuration
sets TRUE means yes FALSE means no
refinedModule
DefEcucModuleDef 01 ref Optional reference from the Vendor Specific Module
Definition to the Standardized Module Definition it refines
In case this EcucModuleDef has the category
STANDARDIZEDMODULEDEFINITION this reference
shall not be provided In case this EcucModuleDef has
the category VENDORSPECIFICMODULE
DEFINITION this reference is mandatory
Stereotypes atpUriDef
supported
ConfigVariantEcucConfiguration
VariantEnum attr Specifies which ConfigurationVariants are supported by
this software module This attribute is optional if the Ecuc
ModuleDef has the category STANDARDIZED
MODULEDEFINITION If the category attribute of the
EcucModuleDef is set to VENDORSPECIFIC
MODULEDEFINITION then this attribute is mandatory
Table A15 EcucModuleDef
Class ISignal
Package M2AUTOSARTemplatesSystemTemplateFibexFibexCoreCoreCommunication
Note Signal of the Interaction Layer The RTE supports a signal fanout where the same System Signal is
sent in different SignalIPdus to multiple receivers
To support the RTE signal fanout each SignalIPdu contains ISignals If the same System Signal is to
be mapped into several SignalIPdus there is one ISignal needed for each ISignalToIPduMapping
ISignals describe the Interface between the Precompile configured RTE and the potentially Postbuild
configured Com Stack see ECUC Parameter Mapping
In case of the SystemSignalGroup an ISignal shall be created for each SystemSignal contained in the
SystemSignalGroup
Tags atprecommendedPackageISignals
Base ARObject CollectableElement FibexElement Identifiable MultilanguageReferrable Packageable
Element Referrable
Attribute Type Mult Kind Note
5
86 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class ISignal
data
TransformationDataTransformation 01 ref Optional reference to a DataTransformation which
represents the transformer chain that is used to transform
the data that shall be placed inside this ISignal
Stereotypes atpSplitable atpVariation
Tags
atpSplitkeydataTransformationdataTransformation
dataTransformationvariationPointshortLabel
vhlatestBindingTimecodeGenerationTime
dataTypePolicy DataTypePolicyEnum 1 attr With the aggregation of SwDataDefProps an ISignal
specifies how it is represented on the network This
representation follows a particular policy Note that this
causes some redundancy which is intended and can be
used to support flexible development methodology as well
as subsequent integrity checks
If the policy networkRepresentationFromComSpec is
chosen the network representation from the ComSpec
that is aggregated by the PortPrototype shall be used If
the override policy is chosen the requirements specified
in the PortInterface and in the ComSpec are not fulfilled
by the networkRepresentationProps In case the System
Description doesnt use a complete Software Component
Description VFB View the legacy policy can be
chosen
initValue ValueSpecification 01 aggr Optional definition of a ISignals initValue in case the
System Description doesnt use a complete Software
Component Description VFB View This supports the
inclusion of legacy system signals
This value can be used to configure the Signals Init
Value
If a full DataMapping exist for the SystemSignal this
information may be available from a configured Sender
ComSpec and ReceiverComSpec In this case the
initvalues in SenderComSpec andor ReceiverComSpec
override this optional value specification Further
restrictions apply from the RTE specification
iSignalProps ISignalProps 01 aggr Additional optional ISignal properties that may be stored
in different files
Stereotypes atpSplitable
Tags atpSplitkeyiSignalProps
iSignalType ISignalTypeEnum 01 attr This attribute defines whether this iSignal is an array that
results in a UINT8N  UINT8DYN ComSignalType in the
COM configuration or a primitive type
length UnlimitedInteger 1 attr Size of the signal in bits The size needs to be derived
from the mapped VariableDataPrototype according to the
mapping of primitive DataTypes to BaseTypes as used in
the RTE Indicates maximum size for dynamic length
signals
The ISignal length of zero bits is allowed
network
Representation
PropsSwDataDefProps 01 aggr Specification of the actual network representation The
usage of SwDataDefProps for this purpose is restricted to
the attributes compuMethod and baseType The optional
baseType attributes memAllignment and byteOrder
shall not be used
The attribute dataTypePolicy in the SystemTemplate
element defines whether this network representation shall
be ignored and the information shall be taken over from
the network representation of the ComSpec
5
5
87 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class ISignal
4
If override is chosen by the system integrator the
network representation can violate against the
requirements defined in the PortInterface and in the
network representation of the ComSpec
In case that the System Description doesnt use a
complete Software Component Description VFB View
this element is used to configure ComSignalDataInvalid
Value and the Data Semantics
systemSignal SystemSignal 1 ref Reference to the System Signal that is supposed to be
transmitted in the ISignal
timeout
Substitution
ValueValueSpecification 01 aggr Defines and enables the ComTimeoutSubstituition for this
ISignal
transformation
ISignalPropsTransformationISignal
Props aggr A transformer chain consists of an ordered list of
transformers The ISignal specific configuration
properties for each transformer are defined in the
TransformationISignalProps class The transformer
configuration properties that are common for all ISignals
are described in the TransformationTechnology class
Table A16 ISignal
Class Identifiable abstract
Package M2AUTOSARTemplatesGenericStructureGeneralTemplateClassesIdentifiable
Note Instances of this class can be referred to by their identifier within the namespace borders In addition to
this Identifiables are objects which contribute significantly to the overall structure of an AUTOSAR
description In particular Identifiables might contain Identifiables
Base ARObject MultilanguageReferrable Referrable
Subclasses ARPackage AbstractDoIpLogicAddressProps AbstractEvent AbstractImplementationDataTypeElement 
AbstractSecurityEventFilter AbstractSecurityIdsmInstanceFilter AbstractServiceInstance  AppOsTask
ProxyToEcuTaskProxyMapping ApplicationEndpoint ApplicationError ApplicationPartitionToEcuPartition
Mapping AsynchronousServerCallResultPoint AtpBlueprint AtpBlueprintable AtpClassifier Atp
Feature  AutosarOperationArgumentInstance AutosarVariableInstance BinaryManifestAddressable
Object  BinaryManifestItemDefinition BinaryManifestResource  BinaryManifestResourceDefinition Block
State BswInternalTriggeringPoint BswModuleDependency BuildActionEntity  BuildActionEnvironment
CanTpAddress CanTpChannel CanTpNode Chapter ClassContentConditional ClientIdDefinition
ClientServerOperation Code CollectableElement  ComManagementMapping CommConnectorPort 
CommunicationConnector CommunicationController  Compiler ConsistencyNeeds ConsumedEvent
Group CouplingPort CouplingPortStructuralElement CpSoftwareClusterResource  CpSoftwareCluster
ResourceToApplicationPartitionMapping CpSoftwareClusterToEcuInstanceMapping CpSoftwareCluster
ToResourceMapping CryptoServiceMapping  DataPrototypeGroup DataTransformation Dependency
OnArtifact DiagEventDebounceAlgorithm  DiagnosticConnectedIndicator DiagnosticDataElement
DiagnosticDebounceAlgorithmProps DiagnosticFunctionInhibitSource DiagnosticRoutineSubfunction 
DltApplication DltArgument DltLogChannel DltMessage DoIpInterface DoIpLogicAddress DoIp
RoutingActivation ECUMapping EOCExecutableEntityRefAbstract  EcuPartition EcucContainerValue
EcucDefinitionElement  EcucDestinationUriDef EcucEnumerationLiteralDef EcucQuery EcucValidation
Condition EndToEndProtection EthernetWakeupSleepOnDatalineConfig EventHandler ExclusiveArea
ExecutableEntity ExecutionTime  FMAttributeDef FMFeatureMapAssertion FMFeatureMapCondition F
MFeatureMapElement FMFeatureRelation FMFeatureRestriction FMFeatureSelection FlatInstance
Descriptor FlexrayArTpNode FlexrayTpConnectionControl FlexrayTpNode FlexrayTpPduPool Frame
Triggering  GeneralParameter GlobalTimeGateway GlobalTimeMaster GlobalTimeSlave HeapUsage 
HwAttributeDef HwAttributeLiteralDef HwPin HwPinGroup IPSecRule IPv6ExtHeaderFilterList ISignal
ToIPduMapping ISignalTriggering IdentCaption  InternalTriggeringPoint J1939SharedAddressCluster
J1939TpNode Keyword LifeCycleState LinScheduleTable LinTpNode Linker MacMulticastGroup Mc
DataInstance MemorySection ModeDeclaration ModeDeclarationMapping ModeSwitchPoint Network
Endpoint NmCluster  NmEcu NmNode  NvBlockDescriptor PackageableElement  ParameterAccess
PduActivationRoutingGroup PduToFrameMapping PduTriggering PerInstanceMemory Physical
5
5
88 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class Identifiable abstract
4
Channel  PortElementToCommunicationResourceMapping PortGroup PortInterfaceMapping  Possible
ErrorReaction ResourceConsumption RootSwCompositionPrototype RptComponent RptContainer
RptExecutableEntity RptExecutableEntityEvent RptExecutionContext RptProfile RptServicePoint Rte
EventInCompositionSeparation RteEventInCompositionToOsTaskProxyMapping RteEventInSystem
Separation RteEventInSystemToOsTaskProxyMapping RunnableEntityGroup SdgAttribute  SdgClass
SecureCommunicationAuthenticationProps SecureCommunicationFreshnessProps SecurityEvent
ContextProps ServerCallPoint ServiceNeeds  SignalServiceTranslationElementProps SignalService
TranslationEventProps SignalServiceTranslationProps SocketAddress SomeipTpChannel Spec
ElementReference StackUsage  StaticSocketConnection StructuredReq SwGenericAxisParamType
SwServiceArg SwcServiceDependency SwcToApplicationPartitionMapping SwcToEcuMapping SwcTo
ImplMapping SystemMapping TDCpSoftwareClusterMapping TDCpSoftwareClusterResourceMapping
TcpOptionFilterList TimingCondition TimingConstraint TimingDescription  TimingExtensionResource
TimingModeInstance TlsCryptoCipherSuite TlsCryptoCipherSuiteProps Topic1 TpAddress Traceable
Table TraceableText TracedFailure TransformationProps  TransformationTechnology Trigger Variable
Access VariationPointProxy ViewMap VlanConfig WaitPoint
Attribute Type Mult Kind Note
adminData AdminData 01 aggr This represents the administrative data for the identifiable
object
Stereotypes atpSplitable
Tags
atpSplitkeyadminData
xmlsequenceOffset40
annotation Annotation  aggr Possibility to provide additional notes while defining a
model element eg the ECU Configuration Parameter
Values These are not intended as documentation but
are mere design notes
Tags xmlsequenceOffset25
category CategoryString 01 attr The category is a keyword that specializes the semantics
of the Identifiable It affects the expected existence of
attributes and the applicability of constraints
Tags xmlsequenceOffset50
desc MultiLanguageOverview
Paragraph01 aggr This represents a general but brief one paragraph
description what the object in question is about It is only
one paragraph Desc is intended to be collected into
overview tables This property helps a human reader to
identify the object in question
More elaborate documentation in particular how the
object is built or used should go to introduction
Tags xmlsequenceOffset60
introduction DocumentationBlock 01 aggr This represents more information about how the object in
question is built or is used Therefore it is a
DocumentationBlock
Tags xmlsequenceOffset30
uuid String 01 attr The purpose of this attribute is to provide a globally
unique identifier for an instance of a metaclass The
values of this attribute should be globally unique strings
prefixed by the type of identifier For example to include a
DCE UUID as defined by The Open Group the UUID
would be preceded by DCE The values of this attribute
may be used to support merging of different AUTOSAR
models The form of the UUID Universally Unique
Identifier is taken from a standard defined by the Open
Group was Open Software Foundation This standard is
widely used including by Microsoft for COM GUIDs and
by many companies for DCE which is based on CORBA
The method for generating these 128bit IDs is published
5
5
89 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class Identifiable abstract
4
in the standard and the effectiveness and uniqueness of
the IDs is not in practice disputed If the id namespace is
omitted DCE is assumed An example is
DCE2fac123431f811b4a22208002b34c003 The
uuid attribute has no semantic meaning for an AUTOSAR
model and there is no requirement for AUTOSAR tools to
manage the timestamp
Tags xmlattributetrue
Table A17 Identifiable
Class Implementation abstract
Package M2AUTOSARTemplatesCommonStructureImplementation
Note Description of an implementation a single software component or module
Base ARElement ARObject CollectableElement Identifiable MultilanguageReferrable Packageable
Element Referrable
Subclasses BswImplementation SwcImplementation
Attribute Type Mult Kind Note
buildAction
ManifestBuildActionManifest 01 ref A manifest specifying the intended build actions for the
software delivered with this implementation
Stereotypes atpVariation
Tags vhlatestBindingTimecodeGenerationTime
codeDescriptor Code  aggr Specifies the provided implementation code
compiler Compiler  aggr Specifies the compiler for which this implementation has
been released
generated
ArtifactDependencyOnArtifact  aggr Relates to an artifact that will be generated during the
integration of this Implementation by an associated
generator tool Note that this is an optional information
since it might not always be in the scope of a single
module or component to provide this information
Stereotypes atpVariation
Tags vhlatestBindingTimepreCompileTime
hwElement HwElement  ref The hardware elements eg the processor required for
this implementation
linker Linker  aggr Specifies the linker for which this implementation has
been released
mcSupport McSupportData 01 aggr The measurement  calibration support data belonging to
this implementation The aggregtion is atpSplitable
because in case of an already exisiting BSW
Implementation model this description will be added later
in the process namely at code generation time
Stereotypes atpSplitable
Tags atpSplitkeymcSupport
programming
LanguageProgramminglanguage
Enum01 attr Programming language the implementation was created
in
5
90 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class Implementation abstract
requiredArtifact DependencyOnArtifact  aggr Specifies that this Implementation depends on the
existance of another artifact eg a library This
aggregation of DependencyOnArtifact is subject to
variability with the purpose to support variability in the
implementations Different algorithms in the
implementation might cause different dependencies eg
the number of used libraries
Stereotypes atpVariation
Tags vhlatestBindingTimepreCompileTime
required
GeneratorToolDependencyOnArtifact  aggr Relates this Implementation to a generator tool in order to
generate additional artifacts during integration
Stereotypes atpVariation
Tags vhlatestBindingTimepreCompileTime
resource
ConsumptionResourceConsumption 01 aggr All static and dynamic resources for each implementation
are described within the ResourceConsumption class
Stereotypes atpSplitable
Tags atpSplitkeyresourceConsumptionshortName
swcBsw
MappingSwcBswMapping 01 ref This allows a mapping between an SWC and a BSW
behavior to be attached to an implementation description
for AUTOSAR Service ECU Abstraction and Complex
Driver Components It is up to the methodology to define
whether this reference has to be set for the Swc or Bsw
Implementtion or for both
swVersion RevisionLabelString 01 attr Software version of this implementation The numbering
contains three levels like major minor patch its values
are vendor specific
usedCode
GeneratorString 01 attr Optional code generator used
vendorId PositiveInteger 01 attr Vendor ID of this Implementation according to the
AUTOSAR vendor list
Table A18 Implementation
Class ImplementationDataType
Package M2AUTOSARTemplatesCommonStructureImplementationDataTypes
Note Describes a reusable data type on the implementation level This will typically correspond to a typedef in
Ccode
Tags atprecommendedPackageImplementationDataTypes
Base ARElement ARObject AbstractImplementationDataType AtpBlueprint AtpBlueprintable AtpClassifier 
AtpType AutosarDataType CollectableElement Identifiable MultilanguageReferrable Packageable
Element Referrable
Attribute Type Mult Kind Note
dynamicArray
SizeProfileString 01 attr Specifies the profile which the array will follow in case this
data type is a variable size array
isStructWith
Optional
ElementBoolean 01 attr This attribute is only valid if the attribute category is set to
STRUCTURE
If set to True this attribute indicates that the
ImplementationDataType has been created with the
intention to define at least one element of the structure as
optional
5
91 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class ImplementationDataType
subElement
orderedImplementationData
TypeElement aggr Specifies an element of an array struct or union data
type
The aggregation of ImplementionDataTypeElement is
subject to variability with the purpose to support the
conditional existence of elements inside a Implementation
DataType representing a structure
Stereotypes atpVariation
Tags vhlatestBindingTimepreCompileTime
symbolProps SymbolProps 01 aggr This represents the SymbolProps for the Implementation
DataType
Stereotypes atpSplitable
Tags atpSplitkeysymbolPropsshortName
typeEmitter NameToken 01 attr This attribute is used to control which part of the
AUTOSAR toolchain is supposed to trigger data type
definitions
Table A19 ImplementationDataType
Class ImplementationDataTypeElement
Package M2AUTOSARTemplatesCommonStructureImplementationDataTypes
Note Declares a data object which is locally aggregated Such an element can only be used within the scope
where it is aggregated
This element either consists of further subElements or it is further defined via its swDataDefProps
There are several use cases within the system of ImplementationDataTypes fur such a local declaration
It can represent the elements of an array defining the element type and array size
It can represent an element of a struct defining its type
It can be the local declaration of a debug element
Base ARObject AbstractImplementationDataTypeElement AtpClassifier AtpFeature AtpStructureElement 
Identifiable MultilanguageReferrable Referrable
Attribute Type Mult Kind Note
arrayImplPolicy ArrayImplPolicyEnum 01 attr This attribute controls the implementation of the payload
of an array It shall only be used if the enclosing
ImplementationDataType constitutes an array
arraySize PositiveInteger 01 attr The existence of this attributes if bigger than 0 defines
the size of an array and declares that this Implementation
DataTypeElement represents the type of each single
array element
Stereotypes atpVariation
Tags vhlatestBindingTimepreCompileTime
arraySize
HandlingArraySizeHandling
Enum01 attr The way how the size of the array is handled in case of a
variable size array
arraySize
SemanticsArraySizeSemantics
Enum01 attr This attribute controls the meaning of the value of the
array size
isOptional Boolean 01 attr This attribute represents the ability to declare the
enclosing ImplementationDataTypeElement as optional
This means that at runtime the ImplementationDataType
Element may or may not have a valid value and shall
therefore be ignored
The underlying runtime software provides means to set
the CppImplementationDataTypeElement as not valid at
the sending end of a communication and determine its
validity at the receiving end
5
92 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class ImplementationDataTypeElement
subElement
orderedImplementationData
TypeElement aggr Element of an array struct or union in case of a nested
declaration ie without using typedefs
The aggregation of ImplementionDataTypeElement is
subject to variability with the purpose to support the
conditional existence of elements inside a Implementation
DataType representing a structure
Stereotypes atpVariation
Tags vhlatestBindingTimepreCompileTime
swDataDef
PropsSwDataDefProps 01 aggr The properties of this ImplementationDataTypeElement
Table A20 ImplementationDataTypeElement
Class InternalBehavior abstract
Package M2AUTOSARTemplatesCommonStructureInternalBehavior
Note Common base class abstract for the internal behavior of both software components and basic software
modulesclusters
Base ARObject AtpClassifier AtpFeature AtpStructureElement Identifiable MultilanguageReferrable 
Referrable
Subclasses BswInternalBehavior SwcInternalBehavior
Attribute Type Mult Kind Note
constant
MemoryParameterData
Prototype aggr Describes a read only memory object containing
characteristic values implemented by this Internal
Behavior
The shortName of ParameterDataPrototype has to be
equal to the C identifier of the described constant
The characteristic values might be shared between Sw
ComponentPrototypes of the same SwComponentType
The aggregation of constantMemory is subject to
variability with the purpose to support variability in the
software component or module implementations
Typically different algorithms in the implementation are
requiring different number of memory objects
Stereotypes atpSplitable atpVariation
Tags
atpSplitkeyconstantMemoryshortName constant
MemoryvariationPointshortLabel
vhlatestBindingTimepreCompileTime
constantValue
MappingConstantSpecification
MappingSet ref Reference to the ConstantSpecificationMapping to be
applied for the particular InternalBehavior
Stereotypes atpSplitable
Tags atpSplitkeyconstantValueMapping
dataType
MappingDataTypeMappingSet  ref Reference to the DataTypeMapping to be applied for the
particular InternalBehavior
Stereotypes atpSplitable
Tags atpSplitkeydataTypeMapping
5
93 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class InternalBehavior abstract
exclusiveArea ExclusiveArea  aggr This specifies an ExclusiveArea for this InternalBehavior
The exclusiveArea is local to the component resp
module The aggregation of ExclusiveAreas is subject to
variability Note the number of ExclusiveAreas might vary
due to the conditional existence of RunnableEntities or
BswModuleEntities
Stereotypes atpSplitable atpVariation
Tags
atpSplitkeyexclusiveAreashortName exclusive
AreavariationPointshortLabel
vhlatestBindingTimepreCompileTime
exclusiveArea
NestingOrderExclusiveAreaNesting
Order aggr This represents the set of ExclusiveAreaNestingOrder
owned by the InternalBehavior
Stereotypes atpSplitable atpVariation
Tags
atpSplitkeyexclusiveAreaNestingOrdershortName
exclusiveAreaNestingOrdervariationPointshortLabel
vhlatestBindingTimepreCompileTime
staticMemory VariableDataPrototype  aggr Describes a read and writeable static memory object
representing measurerment variables implemented by
this software component The term static is used in the
meaning of nontemporary and does not necessarily
specify a linker encapsulation This kind of memory is
only supported if supportsMultipleInstantiation is FALSE
The shortName of the VariableDataPrototype has to be
equal with the C identifier of the described variable
The aggregation of staticMemory is subject to variability
with the purpose to support variability in the software
components implementations
Typically different algorithms in the implementation are
requiring different number of memory objects
Stereotypes atpSplitable atpVariation
Tags
atpSplitkeystaticMemoryshortName static
MemoryvariationPointshortLabel
vhlatestBindingTimepreCompileTime
Table A21 InternalBehavior
Class PortAPIOption
Package M2AUTOSARTemplatesSWComponentTemplateSwcInternalBehaviorPortAPIOptions
Note Options how to generate the signatures of calls for an AtomicSwComponentType in order to
communicate over a PortPrototype for calls into a RunnableEntity as well as for calls from a Runnable
Entity to the PortPrototype
Base ARObject
Attribute Type Mult Kind Note
enableTake
AddressBoolean 01 attr If set to true the softwarecomponent is able to use the
API reference for deriving a pointer to an object
errorHandling DataTransformation
ErrorHandlingEnum01 attr This specifies whether a RunnableEntity accessing a Port
Prototype that is referenced by this PortAPIOption shall
specifically handle transformer errors or not
5
94 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class PortAPIOption
indirectAPI Boolean 01 attr If set to true this attribute specifies an indirect API to be
generated for the associated port which means that the
softwarecomponent is able to access the actions on a
port via a pointer to an object representing a port This
allows eg iterating over ports in a loop This option has
no effect for PPortPrototypes of clientserver interfaces
port PortPrototype 01 ref The option is valid for generated functions related to
communication over this port
portArgValue
orderedPortDefinedArgument
Value aggr An argument value defined by this port
supported
FeatureSwcSupportedFeature  aggr This collection specifies which features are supported by
the RunnableEntitys which access a PortPrototype that it
referenced by this PortAPIOption
transformer
Status
ForwardingDataTransformation
StatusForwardingEnum01 attr This specifies whether a RunnableEntity accessing a Port
Prototype that is referenced by this PortAPIOption shall
be able to forward a status to the transformer chain
Table A22 PortAPIOption
Class PortDefinedArgumentValue
Package M2AUTOSARTemplatesSWComponentTemplateSwcInternalBehaviorPortAPIOptions
Note A PortDefinedArgumentValue is passed to a RunnableEntity dealing with the ClientServerOperations
provided by a given PortPrototype Note that this is restricted to PPortPrototypes of a ClientServer
Interface
Base ARObject
Attribute Type Mult Kind Note
value ValueSpecification 01 aggr Specifies the actual value
valueType ImplementationData
Type01 tref The implementation type of this argument value It should
not be composite type or a pointer
Stereotypes isOfType
Table A23 PortDefinedArgumentValue
Class SOMEIPTransformationProps
Package M2AUTOSARTemplatesSystemTemplateTransformer
Note The class SOMEIPTransformationProps specifies SOMEIP specific configuration properties
Base ARObject Identifiable MultilanguageReferrable Referrable TransformationProps
Attribute Type Mult Kind Note
alignment PositiveInteger 01 attr Defines the padding for alignment purposes that will be
added by the SOMEIP transformer after the serialized
data of the variable data length data element The
alignment shall be specified in Bits
sizeOfArray
LengthFieldPositiveInteger 01 attr This attribute describes the size of the length field in
Bytes that will be put in front of the referenced Array in
the SOMEIP message
sizeOfString
LengthFieldPositiveInteger 01 attr This attribute describes the size of the length field in
Bytes that will be put in front of the referenced String in
the SOMEIP message
sizeOfStruct
LengthFieldPositiveInteger 01 attr This attribute describes the size of the length field in
Bytes that will be put in front of a Structure in the SOME
IP message
5
95 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class SOMEIPTransformationProps
sizeOfUnion
LengthFieldPositiveInteger 01 attr This attribute describes the size of the length field in
Bytes that will be put in front of a Union in the SOMEIP
message
Table A24 SOMEIPTransformationProps
Enumeration SOMEIPTransformerSessionHandlingEnum
Package M2AUTOSARTemplatesSystemTemplateTransformer
Note Enables or disable session handling for SOMEIP transformer
Literal Description
sessionHandling
ActiveThe SOMEIP Transformer shall use session handling
Tags atpEnumerationLiteralIndex0
sessionHandling
InactiveThe SOMEIP Transformer doesnt use session handling
Tags atpEnumerationLiteralIndex1
Table A25 SOMEIPTransformerSessionHandlingEnum
Class SenderReceiverInterface
Package M2AUTOSARTemplatesSWComponentTemplatePortInterface
Note A senderreceiver interface declares a number of data elements to be sent and received
Tags atprecommendedPackagePortInterfaces
Base ARElement ARObject AtpBlueprint AtpBlueprintable AtpClassifier AtpType CollectableElement 
DataInterface Identifiable MultilanguageReferrable PackageableElement PortInterface Referrable
Attribute Type Mult Kind Note
dataElement VariableDataPrototype  aggr The data elements of this SenderReceiverInterface
invalidation
PolicyInvalidationPolicy  aggr InvalidationPolicy for a particular dataElement
metaDataItem
SetMetaDataItemSet  aggr This aggregation defines fixed sets of metadata items
associated with dataElements of the enclosing Sender
ReceiverInterface
Table A26 SenderReceiverInterface
Class SenderReceiverToSignalMapping
Package M2AUTOSARTemplatesSystemTemplateDataMapping
Note Mapping of a sender receiver communication data element to a signal
Base ARObject DataMapping
Attribute Type Mult Kind Note
dataElement VariableDataPrototype 1 iref Reference to the data element
InstanceRef implemented by VariableDataPrototypeIn
SystemInstanceRef
senderToSignal
TextTable
MappingTextTableMapping 01 aggr This mapping allows for the texttable translation between
the sending DataPrototype that is defined in the Port
Prototype and the physicalProps defined for the System
Signal
5
96 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class SenderReceiverToSignalMapping
signalTo
ReceiverText
TableMappingTextTableMapping 01 aggr This mapping allows for the texttable translation between
the physicalProps defined for the SystemSignal and a
receiving DataPrototype that is defined in the Port
Prototype
systemSignal SystemSignal 1 ref Reference to the system signal used to carry the data
element
Table A27 SenderReceiverToSignalMapping
Class SwBaseType
Package M2MSRAsamHdoBaseTypes
Note This metaclass represents a base type used within ECU software
Tags atprecommendedPackageBaseTypes
Base ARElement ARObject AtpBlueprint AtpBlueprintable BaseType CollectableElement Identifiable 
MultilanguageReferrable PackageableElement Referrable
Attribute Type Mult Kind Note
    
Table A28 SwBaseType
Class atpVariation SwDataDefProps
Package M2MSRDataDictionaryDataDefProperties
Note This class is a collection of properties relevant for data objects under various aspects One could
consider this class as a pattern of inheritance by aggregation The properties can be applied to all
objects of all classes in which SwDataDefProps is aggregated
Note that not all of the attributes or associated elements are useful all of the time Hence the process
definition eg expressed with an OCL or a Document Control Instance MSRDCI has the task of
implementing limitations
SwDataDefProps covers various aspects
Structure of the data element for calibration use cases is it a single value a curve or a map but
also the recordLayouts which specify how such elements are mappedconverted to the Data
Types in the programming language or in AUTOSAR This is mainly expressed by properties
like swRecordLayout and swCalprmAxisSet
Implementation aspects mainly expressed by swImplPolicy swVariableAccessImplPolicy sw
AddrMethod swPointerTagetProps baseType implementationDataType and additionalNative
TypeQualifier
Access policy for the MCD system mainly expressed by swCalibrationAccess
Semantics of the data element mainly expressed by compuMethod andor unit dataConstr
invalidValue
Code generation policy provided by swRecordLayout
Tags vhlatestBindingTimecodeGenerationTime
Base ARObject
Attribute Type Mult Kind Note
5
97 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class atpVariation SwDataDefProps
additionalNative
TypeQualifierNativeDeclarationString 01 attr This attribute is used to declare native qualifiers of the
programming language which can neither be deduced
from the baseType eg because the data object
describes a pointer nor from other more abstract
attributes Examples are qualifiers like volatile strict or
enum of the Clanguage All such declarations have to
be put into one string
Tags xmlsequenceOffset235
annotation Annotation  aggr This aggregation allows to add annotations yellow pads
 related to the current data object
Tags
xmlroleElementtrue
xmlroleWrapperElementtrue
xmlsequenceOffset20
xmltypeElementfalse
xmltypeWrapperElementfalse
baseType SwBaseType 01 ref Base type associated with the containing data object
Tags xmlsequenceOffset50
compuMethod CompuMethod 01 ref Computation method associated with the semantics of
this data object
Tags xmlsequenceOffset180
dataConstr DataConstr 01 ref Data constraint for this data object
Tags xmlsequenceOffset190
displayFormat DisplayFormatString 01 attr This property describes how a number is to be rendered
eg in documents or in a measurement and calibration
system
Tags xmlsequenceOffset210
display
PresentationDisplayPresentation
Enum01 attr This attribute controls the presentation of the related data
for measurement and calibration tools
implementation
DataTypeAbstractImplementation
DataType01 ref This association denotes the ImplementationDataType of
a data declaration via its aggregated SwDataDefProps It
is used whenever a data declaration is not directly
referring to a base type Especially
redefinition of an ImplementationDataType via a
typedef to another ImplementationDatatype
the target type of a pointer see SwPointerTarget
Props if it does not refer to a base type directly
the data type of an array or record element within
an ImplementationDataType if it does not refer to
a base type directly
the data type of an SwServiceArg if it does not
refer to a base type directly
Tags xmlsequenceOffset215
invalidValue ValueSpecification 01 aggr Optional value to express invalidity of the actual data
element
Tags xmlsequenceOffset255
stepSize Float 01 attr This attribute can be used to define a value which is
added to or subtracted from the value of a DataPrototype
when using updown keys while calibrating
5
98 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class atpVariation SwDataDefProps
swAddrMethod SwAddrMethod 01 ref Addressing method related to this data object Via an
association to the same SwAddrMethod it can be
specified that several DataPrototypes shall be located in
the same memory without already specifying the memory
section itself
Tags xmlsequenceOffset30
swAlignment AlignmentType 01 attr The attribute describes the intended typical alignment of
the DataPrototype If the attribute is not defined the
alignment is determined by the swBaseType size and the
memoryAllocationKeywordPolicy of the referenced Sw
AddrMethod
Tags xmlsequenceOffset33
swBit
RepresentationSwBitRepresentation 01 aggr Description of the binary representation in case of a bit
variable
Tags xmlsequenceOffset60
swCalibration
AccessSwCalibrationAccess
Enum01 attr Specifies the read or write access by MCD tools for this
data object
Tags xmlsequenceOffset70
swCalprmAxis
SetSwCalprmAxisSet 01 aggr This specifies the properties of the axes in case of a
curve or map etc This is mainly applicable to calibration
parameters
Tags xmlsequenceOffset90
swComparison
VariableSwVariableRefProxy  aggr Variables used for comparison in an MCD process
Tags
xmlsequenceOffset170
xmltypeElementfalse
swData
DependencySwDataDependency 01 aggr Describes how the value of the data object has to be
calculated from the value of another data object by the
MCD system
Tags xmlsequenceOffset200
swHostVariable SwVariableRefProxy 01 aggr Contains a reference to a variable which serves as a
hostvariable for a bit variable Only applicable to bit
objects
Tags
xmlsequenceOffset220
xmltypeElementfalse
swImplPolicy SwImplPolicyEnum 01 attr Implementation policy for this data object
Tags xmlsequenceOffset230
swIntended
ResolutionNumerical 01 attr The purpose of this element is to describe the requested
quantization of data objects early on in the design
process
The resolution ultimately occurs via the conversion
formula present compuMethod which specifies the
transition from the physical world to the standardized
world and viceversa here the slope per bit is present
implicitly in the conversion formula
In the case of a development phase without a fixed
conversion formula a prespecification can occur through
swIntendedResolution
The resolution is specified in the physical domain
according to the property unit
Tags xmlsequenceOffset240
5
99 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class atpVariation SwDataDefProps
swInterpolation
MethodIdentifier 01 attr This is a keyword identifying the mathematical method to
be applied for interpolation The keyword needs to be
related to the interpolation routine which needs to be
invoked
Tags xmlsequenceOffset250
swIsVirtual Boolean 01 attr This element distinguishes virtual objects Virtual objects
do not appear in the memory their derivation is much
more dependent on other objects and hence they shall
have a swDataDependency 
Tags xmlsequenceOffset260
swPointerTarget
PropsSwPointerTargetProps 01 aggr Specifies that the containing data object is a pointer to
another data object
Tags xmlsequenceOffset280
swRecord
LayoutSwRecordLayout 01 ref Record layout for this data object
Tags xmlsequenceOffset290
swRefresh
TimingMultidimensionalTime 01 aggr This element specifies the frequency in which the object
involved shall be or is called or calculated This timing
can be collected from the task in which write access
processes to the variable run But this cannot be done by
the MCD system
So this attribute can be used in an early phase to express
the desired refresh timing and later on to specify the real
refresh timing
Tags xmlsequenceOffset300
swTextProps SwTextProps 01 aggr the specific properties if the data object is a text object
Tags xmlsequenceOffset120
swValueBlock
SizeNumerical 01 attr This represents the size of a Value Block
Stereotypes atpVariation
Tags
vhlatestBindingTimepreCompileTime
xmlsequenceOffset80
swValueBlock
SizeMult
orderedNumerical  attr This attribute is used to specify the dimensions of a value
block VALBLK for the case that that value block has
more than one dimension
The dimensions given in this attribute are ordered such
that the first entry represents the first dimension the
second entry represents the second dimension and so
on
For onedimensional value blocks the attribute swValue
BlockSize shall be used and this attribute shall not exist
Stereotypes atpVariation
Tags vhlatestBindingTimepreCompileTime
unit Unit 01 ref Physical unit associated with the semantics of this data
object This attribute applies if no compuMethod is
specified If both units this as well as via compuMethod
are specified the units shall be compatible
Tags xmlsequenceOffset350
valueAxisData
TypeApplicationPrimitive
DataType01 ref The referenced ApplicationPrimitiveDataType represents
the primitive data type of the value axis within a
compound primitive eg curve map It supersedes
CompuMethod Unit and BaseType
Tags xmlsequenceOffset355
Table A29 SwDataDefProps
100 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Class SwTextProps
Package M2MSRDataDictionaryDataDefProperties
Note This metaclass expresses particular properties applicable to strings in variables or calibration
parameters
Base ARObject
Attribute Type Mult Kind Note
arraySize
SemanticsArraySizeSemantics
Enum01 attr This attribute controls the semantics of the arraysize for
the array representing the string in an Implementation
DataType
It is there to support a safe conversion between
ApplicationDatatype and ImplementationDatatype even
for variable length strings as required eg for Support of
SAE J1939
baseType SwBaseType 01 ref This is the base type of one character in the string In
particular this baseType denotes the intended encoding of
the characters in the string on level of ApplicationData
Type
Tags xmlsequenceOffset30
swFillCharacter Integer 01 attr Filler character for text parameter to pad up to the
maximum length swMaxTextSize
The value will be interpreted according to the encoding
specified in the associated base type of the data object
eg 0x30 hex represents the ASCII character zero as
filler character and 0 dec represents an end of string as
filler character
The usage of the fill character depends on the arraySize
Semantics
Tags xmlsequenceOffset40
swMaxTextSize Integer 01 attr Specifies the maximum text size in characters Note the
size in bytes depends on the encoding in the
corresponding baseType
Stereotypes atpVariation
Tags
vhlatestBindingTimepreCompileTime
xmlsequenceOffset20
Table A30 SwTextProps
Class SystemSignal
Package M2AUTOSARTemplatesSystemTemplateFibexFibexCoreCoreCommunication
Note The system signal represents the communication systems view of data exchanged between SW
components which reside on different ECUs The system signals allow to represent this communication
in a flattened structure with exactly one system signal defined for each data element prototype sent and
received by connected SW component instances
Tags atprecommendedPackageSystemSignals
Base ARElement ARObject CollectableElement Identifiable MultilanguageReferrable Packageable
Element Referrable
Attribute Type Mult Kind Note
dynamicLength Boolean 1 attr The length of dynamic length signals is variable in
runtime Only a maximum length of such a signal is
specified in the configuration attribute length in ISignal
element
5
101 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
4
Class SystemSignal
physicalProps SwDataDefProps 01 aggr Specification of the physical representation
Table A31 SystemSignal
Class atpVariation TransformationISignalProps abstract
Package M2AUTOSARTemplatesSystemTemplateTransformer
Note TransformationISignalProps holds all the attributes for the different TransformationTechnologies that are
ISignal specific
Tags vhlatestBindingTimepostBuild
Base ARObject Describable
Subclasses EndToEndTransformationISignalProps SOMEIPTransformationISignalProps UserDefinedTransformation
ISignalProps
Attribute Type Mult Kind Note
csErrorReaction CSTransformerError
ReactionEnum01 attr Defines whether the transformer chain of clientserver
communication coordinates an autonomous error reaction
together with the RTE or whether any error reaction is the
responsibility of the application
dataPrototype
Transformation
PropsDataPrototype
TransformationProps aggr Fine granular modeling of TransfromationProps on the
level of DataPrototypes
transformer Transformation
Technology1 ref Reference to the TransformationTechnology description
that contains transformer specific and ISignal
independent configuration properties
Table A32 TransformationISignalProps
Class TransformationTechnology
Package M2AUTOSARTemplatesSystemTemplateTransformer
Note A TransformationTechnology is a transformer inside a transformer chain
Tags xmlnamePluralTRANSFORMATIONTECHNOLOGIES
Base ARObject Identifiable MultilanguageReferrable Referrable
Attribute Type Mult Kind Note
bufferProperties BufferProperties 1 aggr Aggregation of the mandatory BufferProperties
hasInternal
StateBoolean 01 attr This attribute defines whether the Transformer has an
internal state or not
needsOriginal
DataBoolean 01 attr Specifies whether this transformer gets access to the
SWCs original data
protocol String 1 attr Specifies the protocol that is implemented by this
transformer
transformation
DescriptionTransformation
Description01 aggr A transformer can be configured with transformer specific
parameters which are represented by the Transformer
Description
Stereotypes atpVariation
Tags vhlatestBindingTimepostBuild
transformer
ClassTransformerClassEnum 1 attr Specifies to which transformer class this transformer
belongs
version String 1 attr Version of the implemented protocol
Table A33 TransformationTechnology
102 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Class TriggerToSignalMapping
Package M2AUTOSARTemplatesSystemTemplateDataMapping
Note This metaclass represents the ability to map a trigger to a SystemSignal of size 0 The Trigger does not
transport any other information than its existence therefore the limitation in terms of signal length
Base ARObject DataMapping
Attribute Type Mult Kind Note
systemSignal SystemSignal 1 ref This is the SystemSignal taken to transport the Trigger
over the network
Tags xmlsequenceOffset20
trigger Trigger 1 iref This represents the Trigger that shall be used to trigger
RunnableEntities deployed to a remote ECU
Tags xmlsequenceOffset10
InstanceRef implemented by TriggerInSystemInstance
Ref
Table A34 TriggerToSignalMapping
B Features of SOMEIP not supported by AUTOSAR
SOMEIP transformer
The following features of SOMEIP are currently not supported by the SOMEIP trans
former
Exceptions and exceptionspecific error data structures
Tunneling of SOMEIP messages through CAN and Flexray leads to SOMEIP
messages without parts of the header inserted by 4 SWS Socket Adaptor
Queued FireForget methods without parameters are not supported by
AUTOSAR at all Unqueued FireForget methods without parameters and
queued FireForget methods with parameters are supported
The SOMEIP transformer doesnt check whether variable size arrays contain a
minimal number of elements reason this is supported by SOMEIP protocol but
not by AUTOSAR
Optional method arguments AUTOSAR Classic platform does not support the
existence of optional method arguments
C Examples
This appendix contains examples which are suitable to help understanding details of
the SOMEIP Transformer
103 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
C1 Serialization of a ClientServer Operation
As the serialization of interECU ClientServer communication is the most complex
scenario this example will show the resulting APIs which exist in RTE and Transformer
both on the Client and the Server as well an overview of the resulting serialized data
on the network
The example deals with two SWCs which are distributed to two ECUs which are con
nected over some kind of network The SOMEIP Transformer shall be used to se
rialize the interECU communication The client calls a ClientServerOperation
which is provided by the server For the server there are two PortDefinedAr
gumentValue s defined which are applied to the runnable which implements the
ClientServerOperation  These PortDefinedArgumentValue s are only visible
within the InternalBehavior of the server They are not visible to the outside world
ClientServerInterface   neither to the client nor in the data on the network
The following tables define the example ClientServerInterface used here
Name SomeCSInterface
Comment A ClientServerInterface which contains anything needed to show
serialization of ClientServerOperations by SOMEIP Transformer
IsService false
Variation 
Possible Errors 0 EOK
1 EDATAINCONSISTENT
2 EUNKNOWNERROR
Table C1 ClientServerInterface SomeCSInterface
Operations
Name SomeCSOperation
Comments The ClientServerOperation which is used to demonstrate how the SOMEIP
serialization for ClientSever communication works
Variation 
Parameters inputParam1
Comment A parameter which is handed over from the
Client to the Server
Type uint8
Variation 
Direction IN
inputParam2
Comment A parameter which is handed over from the
Client to the Server
Type uint16
Variation 
Direction IN
biDirectionalParam
104 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
Comment A parameter which is handed over from the
Client to the Server modified by the Server
and handed back to the Client
Type someStruct
Variation 
Direction INOUT
outputParam1
Comment A parameter which is handed over from the
Server to the Client
Type uint16
Variation 
Direction OUT
outputParam2
Comment A parameter which is handed over from the
Server to the Client
Type uint32
Variation 
Direction OUT
Possible Errors EOK Operation successful
EDATA
INCONSISTENTData are inconsistent
EUNKNOWNERROR An unknown error occured
Table C2 Operation SomeCSOperation
C11 Client
On the client side the following RTEAPI is generated according to SWSRte01102
based on the ClientServerInterface which is specified above and the attribute
errorHandling ofPortAPIOption 
StdReturnType RteCallClientPortSomeCSOperation
uint8 inputParam1
uint16 inputParam2
someStruct biDirectionalParam
uint16 outputParam1
uint32 outputParam2
RteTransformerError transformerError
For this signature the attribute errorHandling ofPortAPIOption is set to trans
formerErrorHandling  If it would be set to noTransformerErrorHandling  the
parameter RteTransformerError transformerError would not be included
in the signature above
The signature above reflects an synchronous server call For an asynchronous server
call all OUT parameters would be missing for RteCall but an RteResult would
be necessary instead The examples for signatures and parameters shown here can
be transferred analogously to RteResult 
This is the API used in the runnable of the client to call the remote server operation
105 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
The RTE executes for the serialization of the request the SOMEIP Transformer with
the following API which is specified in SWSSomeIpXf00141
uint8 SomeIpXfCSOpSerializer
const RteCsTransactionHandleType TransactionHandle
uint8 buffer
uint16 bufferLength
uint8 inputParam1
uint16 inputParam2
someStruct biDirectionalParam
This function will serialize the TransactionHandle and all ININOUT parameters for
the request into the following format
SOMEIP Header  input  
Param1  inputParam2  biDirectionalParam  
Figure C1 Example for serialized data of the ClientServer Request
The SOMEIP Header contains the TransactionHandle see SWSSomeIpXf00025
and SWSSomeIpXf00026
To deserialize the response that is received by the client after execu
tion of the ClientServerOperation on the server the API according to
SWSSomeIpXf00145 is used
uint8 SomeIpXfInvCSOpSerializer
RteCsTransactionHandleType TransactionHandle
const uint8 buffer
uint16 bufferLength
StdReturnType returnValue
someStruct biDirectionalParam
uint16 outputParam1
uint32 outputParam2
C12 Server
On the server side the ClientServerOperation is implemented by a runnable with
the following signature which now contains the PortDefinedArgumentValue s see
SWSRte01166
StdReturnType SomeCSOperation
uint8 portDefArg1
uint8 portDefArg2
uint8 inputParam1
uint16 inputParam2
someStruct biDirectionalParam
uint16 outputParam1
uint32 outputParam2
106 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
Specification of SOMEIP Transformer
AUTOSAR CP R2111
For the deserialization of the received request the SOMEIP Transformer on the server
side provides according to SWSSomeIpXf00141 this CAPI
uint8 SomeIpXfInvCSOpSerializer
RteCsTransactionHandleType TransactionHandle
const uint8 buffer
uint16 bufferLength
uint8 inputParam1
uint16 inputParam2
someStruct biDirectionalParam
The function for serialization of the response is specified by SWSSomeIpXf00145
uint8 SomeIpXfCSOpSerializer
const RteCsTransactionHandleType TransactionHandle
uint8 buffer
uint16 bufferLength
StdReturnType returnValue
someStruct biDirectionalParam
uint16 outputParam1
uint32 outputParam2
This function will serialize the TransactionHandle  the returnValue and all IN
OUTOUT parameters for the response into the following format
SOMEIP Header  biDirectionalParam  outputParam1  outputParam2  
Figure C2 Example for serialized data of the ClientServer Response
The SOMEIP Header contains the TransactionHandle andreturnValue see
SWSSomeIpXf00025 SWSSomeIpXf00026 and SWSSomeIpXf00115
107 of 107 Document ID 660 AUTOSARSWSSOMEIPTransformer
 
